gASVAAABAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UaACMB3NlY3Rpb26Uk5QpgZR9lChoBWgGaAddlChoAIwFdGl0bGWUk5QpgZR9lChoBYwdOm1vZDpgZXRoZXJldW0uZGFvX2Zvcmsuc3BlY2CUaAddlChoAIwJcmVmZXJlbmNllJOUKYGUfZQoaAVoBmgHXZRoAIwHbGl0ZXJhbJSTlCmBlH2UKGgFaBJoB12UaACMBFRleHSUk5SMFmV0aGVyZXVtLmRhb19mb3JrLnNwZWOUhZSBlH2UKGgFaAaMBnBhcmVudJRoG4wJX2RvY3VtZW50lGgDjAZzb3VyY2WUjKIvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy8udG94L2RvY3Mvc3RhZ2UwX291dC9hdXRvYXBpLyA9PiBkb2MvZGlmZnOUjARsaW5llEsAdWJhjAphdHRyaWJ1dGVzlH2UKIwDaWRzlF2UjAdjbGFzc2VzlF2UKIwEeHJlZpSMAnB5lIwGcHktbW9klGWMBW5hbWVzlF2UjAhkdXBuYW1lc5RdlIwIYmFja3JlZnOUXZR1jAd0YWduYW1llGgZaCZOaChOaCRoFnViYWgpfZQoaCtdlGgtXZSMD2NoYW5nZS1yZXBsYWNlZJRhaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMHW1vZHVsZS1ldGhlcmV1bS5kYW9fZm9yay5zcGVjlIwIcmVmdGl0bGWUjBZldGhlcmV1bS5kYW9fZm9yay5zcGVjlHVoOGgUaCZoJ2goSwBoJGgQaCVoA3ViaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAWMJjptb2Q6YGV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnNwZWNglGgHXZRoH4wfZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUuc3BlY5SFlIGUfZQoaAVoBmgkaEhoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKIwEeHJlZpSMAnB5lIwGcHktbW9klGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkaEV1YmFoKX2UKGgrXZRoLV2UjBJjaGFuZ2UtcmVwbGFjZW1lbnSUYWgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjCZtb2R1bGUtZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUuc3BlY5SMCHJlZnRpdGxllIwfZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUuc3BlY5R1aDhoFGgmaCdoKEsAaCRoEGglaAN1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aA5oJoykL2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3SUaChLAmgkaAtoJWgDdWKMD3NwaGlueC5hZGRub2Rlc5SMBWluZGV4lJOUKYGUfZQoaAVoBmgHXZRoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAdlbnRyaWVzlF2UKIwEcGFpcpSMHm1vZHVsZTsgZXRoZXJldW0uZGFvX2Zvcmsuc3BlY5SMHW1vZHVsZS1ldGhlcmV1bS5kYW9fZm9yay5zcGVjlGgGTnSUYXVoOGhtaCZoa2goSwVoJGgLaCVoA3ViaAopgZR9lChoBWgGaAddlChoDymBlH2UKGgFjBZFdGhlcmV1bSBTcGVjaWZpY2F0aW9ulGgHXZRoH4wWRXRoZXJldW0gU3BlY2lmaWNhdGlvbpSFlIGUfZQoaAVoBmgkaIFoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aA5oJmhraChLB2gkaH5oJWgDdWJoAIwFdG9waWOUk5QpgZR9lChoBWgGaAddlChoDymBlH2UKGgFjBFUYWJsZSBvZiBDb250ZW50c5RoB12UaB+MEVRhYmxlIG9mIENvbnRlbnRzlIWUgZR9lChoBWgGaCRolGglaANoJmgnaChLAHVi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aW5nIGJsb2NrIGNoYWluLgoKdmFsaWRhdGVfaGVhZGVyCgpWZXJpZmllcyBhIGJsb2NrIGhlYWRlci4KCmdlbmVyYXRlX2hlYWRlcl9oYXNoX2Zvcl9wb3cKCkdlbmVyYXRlIHJscCBoYXNoIG9mIHRoZSBoZWFkZXIgd2hpY2ggaXMgdG8gYmUgdXNlZCBmb3IgUHJvb2Ytb2YtV29yawoKdmFsaWRhdGVfcHJvb2Zfb2Zfd29yawoKVmFsaWRhdGVzIHRoZSBQcm9vZiBvZiBXb3JrIGNvbnN0cmFpbnRzLgoKYXBwbHlfYm9keQoKRXhlY3V0ZXMgYSBibG9jay4KCnZhbGlkYXRlX29tbWVycwoKVmFsaWRhdGVzIHRoZSBvbW1lcnMgbWVudGlvbmVkIGluIHRoZSBibG9jay4KCnBheV9yZXdhcmRzCgpQYXkgcmV3YXJkcyB0byB0aGUgYmxvY2sgbWluZXIgYXMgd2VsbCBhcyB0aGUgb21tZXJzIG1pbmVycy4KCnByb2Nlc3NfdHJhbnNhY3Rpb24KCkV4ZWN1dGUgYSB0cmFuc2FjdGlvbiBhZ2FpbnN0IHRoZSBwcm92aWRlZCBlbnZpcm9ubWVudC4KCnZhbGlkYXRlX3RyYW5zYWN0aW9uCgpWZXJpZmllcyBhIHRyYW5zYWN0aW9uLgoKY2FsY3VsYXRlX2ludHJpbnNpY19jb3N0CgpDYWxjdWxhdGVzIHRoZSBpbnRyaW5zaWMgY29zdCBvZiB0aGUgdHJhbnNhY3Rpb24gdGhhdCBpcyBjaGFyZ2VkIGJlZm9yZQoKcmVjb3Zlcl9zZW5kZXIKCkV4dHJhY3RzIHRoZSBzZW5kZXIgYWRkcmVzcyBmcm9tIGEgdHJhbnNhY3Rpb24uCgpzaWduaW5nX2hhc2gKCkNvbXB1dGUgdGhlIGhhc2ggb2YgYSB0cmFuc2FjdGlvbiB1c2VkIGluIHRoZSBzaWduYXR1cmUuCgpjb21wdXRlX2hlYWRlcl9oYXNoCgpDb21wdXRlcyB0aGUgaGFzaCBvZiBhIGJsb2NrIGhlYWRlci4KCmNoZWNrX2dhc19saW1pdAoKVmFsaWRhdGVzIHRoZSBnYXMgbGltaXQgZm9yIGEgYmxvY2suCgpjYWxjdWxhdGVfYmxvY2tfZGlmZmljdWx0eQoK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YmxvY2tfaGFzaGVzPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFalAGAABoB12UaB+MGWdldF9sYXN0XzI1Nl9ibG9ja19oYXNoZXOUhZSBlH2UKGgFaAZoJGpVBgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRqUgYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwwZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5nZXRfbGFzdF8yNTZfYmxvY2tfaGFzaGVzlIwIcmVmdGl0bGWUjDBldGhlcmV1bS5kYW9fZm9yay5zcGVjLmdldF9sYXN0XzI1Nl9ibG9ja19oYXNoZXOUdWg4aBRoJk5oKE5oJGpOBgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkaksGAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGpIBgAAdWJqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYxLT2J0YWluIHRoZSBsaXN0IG9mIGhhc2hlcyBvZiB0aGUgcHJldmlvdXMgMjU2IGJsb2NrcyBpbiBvcmRlciBvZiBpbmNyZWFzaW5nlGgHXZRoH4xLT2J0YWluIHRoZSBsaXN0IG9mIGhhc2hlcyBvZiB0aGUgcHJldmlvdXMgMjU2IGJsb2NrcyBpbiBvcmRlciBvZiBpbmNyZWFzaW5nlIWUgZR9lChoBWgGaCRqfwYAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGp8BgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqSAYAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqKQUAAGgmTmgoTmgkat8FAAB1YmoqBQAAKYGUfZQoaAVoBmgHXZQoai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMQTpvYmo6YHN0YXRlX3RyYW5zaXRpb24gPGV0aGVyZXVtLmRhb19mb3JrLnNwZWMuc3RhdGVfdHJhbnNpdGlvbj5glGgHXZRoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBWqiBgAAaAddlGgfjBBzdGF0ZV90cmFuc2l0aW9ulIWUgZR9lChoBWgGaCRqpwYAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkaqQGAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMJ2V0aGVyZXVtLmRhb19mb3JrLnNwZWMuc3RhdGVfdHJhbnNpdGlvbpSMCHJlZnRpdGxllIwnZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5zdGF0ZV90cmFuc2l0aW9ulHVoOGgUaCZOaChOaCRqoAYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGqdBgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqmgYAAHViai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMNUF0dGVtcHRzIHRvIGFwcGx5IGEgYmxvY2sgdG8gYW4gZXhpc3RpbmcgYmxvY2sgY2hhaW4ulGgHXZRoH4w1QXR0ZW1wdHMgdG8gYXBwbHkgYSBibG9jayB0byBhbiBleGlzdGluZyBibG9jayBjaGFpbi6UhZSBlH2UKGgFaAZoJGrRBgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkas4GAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGqaBgAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGopBQAAaCZOaChOaCRq3wUAAHViaioFAAApgZR9lChoBWgGaAddlChqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYw/Om9iajpgdmFsaWRhdGVfaGVhZGVyIDxldGhlcmV1bS5kYW9fZm9yay5zcGVjLnZhbGlkYXRlX2hlYWRlcj5glGgHXZRoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBWr0BgAAaAddlGgfjA92YWxpZGF0ZV9oZWFkZXKUhZSBlH2UKGgFaAZoJGr5BgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRq9gYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwmZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy52YWxpZGF0ZV9oZWFkZXKUjAhyZWZ0aXRsZZSMJmV0aGVyZXVtLmRhb19mb3JrLnNwZWMudmFsaWRhdGVfaGVhZGVylHVoOGgUaCZOaChOaCRq8gYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGrvBgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRq7AYAAHViai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMGFZlcmlmaWVzIGEgYmxvY2sgaGVhZGVyLpRoB12UaB+MGFZlcmlmaWVzIGEgYmxvY2sgaGVhZGVyLpSFlIGUfZQoaAVoBmgkaiMHAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqIAcAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkauwGAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aikFAABoJk5oKE5oJGrfBQAAdWJqKgUAACmBlH2UKGgFaAZoB12UKGovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjFk6b2JqOmBnZW5lcmF0ZV9oZWFkZXJfaGFzaF9mb3JfcG93IDxldGhlcmV1bS5kYW9fZm9yay5zcGVjLmdlbmVyYXRlX2hlYWRlcl9oYXNoX2Zvcl9wb3c+YJRoB12UaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAVqRgcAAGgHXZRoH4wcZ2VuZXJhdGVfaGVhZGVyX2hhc2hfZm9yX3Bvd5SFlIGUfZQoaAVoBmgkaksHAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGpIBwAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjDNldGhlcmV1bS5kYW9fZm9yay5zcGVjLmdlbmVyYXRlX2hlYWRlcl9oYXNoX2Zvcl9wb3eUjAhyZWZ0aXRsZZSMM2V0aGVyZXVtLmRhb19mb3JrLnNwZWMuZ2VuZXJhdGVfaGVhZGVyX2hhc2hfZm9yX3Bvd5R1aDhoFGgmTmgoTmgkakQHAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqQQcAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkaj4HAAB1YmovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjEVHZW5lcmF0ZSBybHAgaGFzaCBvZiB0aGUgaGVhZGVyIHdoaWNoIGlzIHRvIGJlIHVzZWQgZm9yIFByb29mLW9mLVdvcmuUaAddlGgfjEVHZW5lcmF0ZSBybHAgaGFzaCBvZiB0aGUgaGVhZGVyIHdoaWNoIGlzIHRvIGJlIHVzZWQgZm9yIFByb29mLW9mLVdvcmuUhZSBlH2UKGgFaAZoJGp1BwAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkanIHAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGo+BwAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGopBQAAaCZOaChOaCRq3wUAAHViaioFAAApgZR9lChoBWgGaAddlChqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYxNOm9iajpgdmFsaWRhdGVfcHJvb2Zfb2Zfd29yayA8ZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy52YWxpZGF0ZV9wcm9vZl9vZl93b3JrPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFapgHAABoB12UaB+MFnZhbGlkYXRlX3Byb29mX29mX3dvcmuUhZSBlH2UKGgFaAZoJGqdBwAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRqmgcAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwtZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy52YWxpZGF0ZV9wcm9vZl9vZl93b3JrlIwIcmVmdGl0bGWUjC1ldGhlcmV1bS5kYW9fZm9yay5zcGVjLnZhbGlkYXRlX3Byb29mX29mX3dvcmuUdWg4aBRoJk5oKE5oJGqWBwAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkapMHAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGqQBwAAdWJqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYwoVmFsaWRhdGVzIHRoZSBQcm9vZiBvZiBXb3JrIGNvbnN0cmFpbnRzLpRoB12UaB+MKFZhbGlkYXRlcyB0aGUgUHJvb2Ygb2YgV29yayBjb25zdHJhaW50cy6UhZSBlH2UKGgFaAZoJGrHBwAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkasQHAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGqQBwAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGopBQAAaCZOaChOaCRq3wUAAHViaioFAAApgZR9lChoBWgGaAddlChqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYw1Om9iajpgYXBwbHlfYm9keSA8ZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5hcHBseV9ib2R5PmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFauoHAABoB12UaB+MCmFwcGx5X2JvZHmUhZSBlH2UKGgFaAZoJGrvBwAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRq7AcAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwhZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5hcHBseV9ib2R5lIwIcmVmdGl0bGWUjCFldGhlcmV1bS5kYW9fZm9yay5zcGVjLmFwcGx5X2JvZHmUdWg4aBRoJk5oKE5oJGroBwAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkauUHAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGriBwAAdWJqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYwRRXhlY3V0ZXMgYSBibG9jay6UaAddlGgfjBFFeGVjdXRlcyBhIGJsb2NrLpSFlIGUfZQoaAVoBmgkahkIAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqFggAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkauIHAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aikFAABoJk5oKE5oJGrfBQAAdWJqKgUAACmBlH2UKGgFaAZoB12UKGovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjD86b2JqOmB2YWxpZGF0ZV9vbW1lcnMgPGV0aGVyZXVtLmRhb19mb3JrLnNwZWMudmFsaWRhdGVfb21tZXJzPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFajwIAABoB12UaB+MD3ZhbGlkYXRlX29tbWVyc5SFlIGUfZQoaAVoBmgkakEIAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGo+CAAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjCZldGhlcmV1bS5kYW9fZm9yay5zcGVjLnZhbGlkYXRlX29tbWVyc5SMCHJlZnRpdGxllIwmZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy52YWxpZGF0ZV9vbW1lcnOUdWg4aBRoJk5oKE5oJGo6CAAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkajcIAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGo0CAAAdWJqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYwsVmFsaWRhdGVzIHRoZSBvbW1lcnMgbWVudGlvbmVkIGluIHRoZSBibG9jay6UaAddlGgfjCxWYWxpZGF0ZXMgdGhlIG9tbWVycyBtZW50aW9uZWQgaW4gdGhlIGJsb2NrLpSFlIGUfZQoaAVoBmgkamsIAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqaAgAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkajQIAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aikFAABoJk5oKE5oJGrfBQAAdWJqKgUAACmBlH2UKGgFaAZoB12UKGovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjDc6b2JqOmBwYXlfcmV3YXJkcyA8ZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5wYXlfcmV3YXJkcz5glGgHXZRoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBWqOCAAAaAddlGgfjAtwYXlfcmV3YXJkc5SFlIGUfZQoaAVoBmgkapMIAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGqQCAAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjCJldGhlcmV1bS5kYW9fZm9yay5zcGVjLnBheV9yZXdhcmRzlIwIcmVmdGl0bGWUjCJldGhlcmV1bS5kYW9fZm9yay5zcGVjLnBheV9yZXdhcmRzlHVoOGgUaCZOaChOaCRqjAgAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGqJCAAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqhggAAHViai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMPFBheSByZXdhcmRzIHRvIHRoZSBibG9jayBtaW5lciBhcyB3ZWxsIGFzIHRoZSBvbW1lcnMgbWluZXJzLpRoB12UaB+MPFBheSByZXdhcmRzIHRvIHRoZSBibG9jayBtaW5lciBhcyB3ZWxsIGFzIHRoZSBvbW1lcnMgbWluZXJzLpSFlIGUfZQoaAVoBmgkar0IAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRquggAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkaoYIAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aikFAABoJk5oKE5oJGrfBQAAdWJqKgUAACmBlH2UKGgFaAZoB12UKGovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjEc6b2JqOmBwcm9jZXNzX3RyYW5zYWN0aW9uIDxldGhlcmV1bS5kYW9fZm9yay5zcGVjLnByb2Nlc3NfdHJhbnNhY3Rpb24+YJRoB12UaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAVq4AgAAGgHXZRoH4wTcHJvY2Vzc190cmFuc2FjdGlvbpSFlIGUfZQoaAVoBmgkauUIAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGriCAAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjCpldGhlcmV1bS5kYW9fZm9yay5zcGVjLnByb2Nlc3NfdHJhbnNhY3Rpb26UjAhyZWZ0aXRsZZSMKmV0aGVyZXVtLmRhb19mb3JrLnNwZWMucHJvY2Vzc190cmFuc2FjdGlvbpR1aDhoFGgmTmgoTmgkat4IAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRq2wgAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkatgIAAB1YmovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjDdFeGVjdXRlIGEgdHJhbnNhY3Rpb24gYWdhaW5zdCB0aGUgcHJvdmlkZWQgZW52aXJvbm1lbnQulGgHXZRoH4w3RXhlY3V0ZSBhIHRyYW5zYWN0aW9uIGFnYWluc3QgdGhlIHByb3ZpZGVkIGVudmlyb25tZW50LpSFlIGUfZQoaAVoBmgkag8JAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqDAkAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkatgIAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aikFAABoJk5oKE5oJGrfBQAAdWJqKgUAACmBlH2UKGgFaAZoB12UKGovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjEk6b2JqOmB2YWxpZGF0ZV90cmFuc2FjdGlvbiA8ZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy52YWxpZGF0ZV90cmFuc2FjdGlvbj5glGgHXZRoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBWoyCQAAaAddlGgfjBR2YWxpZGF0ZV90cmFuc2FjdGlvbpSFlIGUfZQoaAVoBmgkajcJAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGo0CQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjCtldGhlcmV1bS5kYW9fZm9yay5zcGVjLnZhbGlkYXRlX3RyYW5zYWN0aW9ulIwIcmVmdGl0bGWUjCtldGhlcmV1bS5kYW9fZm9yay5zcGVjLnZhbGlkYXRlX3RyYW5zYWN0aW9ulHVoOGgUaCZOaChOaCRqMAkAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGotCQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqKgkAAHViai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMF1ZlcmlmaWVzIGEgdHJhbnNhY3Rpb24ulGgHXZRoH4wXVmVyaWZpZXMgYSB0cmFuc2FjdGlvbi6UhZSBlH2UKGgFaAZoJGphCQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkal4JAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGoqCQAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGopBQAAaCZOaChOaCRq3wUAAHViaioFAAApgZR9lChoBWgGaAddlChqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYxROm9iajpgY2FsY3VsYXRlX2ludHJpbnNpY19jb3N0IDxldGhlcmV1bS5kYW9fZm9yay5zcGVjLmNhbGN1bGF0ZV9pbnRyaW5zaWNfY29zdD5glGgHXZRoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBWqECQAAaAddlGgfjBhjYWxjdWxhdGVfaW50cmluc2ljX2Nvc3SUhZSBlH2UKGgFaAZoJGqJCQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRqhgkAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwvZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5jYWxjdWxhdGVfaW50cmluc2ljX2Nvc3SUjAhyZWZ0aXRsZZSML2V0aGVyZXVtLmRhb19mb3JrLnNwZWMuY2FsY3VsYXRlX2ludHJpbnNpY19jb3N0lHVoOGgUaCZOaChOaCRqggkAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGp/CQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqfAkAAHViai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMR0NhbGN1bGF0ZXMgdGhlIGludHJpbnNpYyBjb3N0IG9mIHRoZSB0cmFuc2FjdGlvbiB0aGF0IGlzIGNoYXJnZWQgYmVmb3JllGgHXZRoH4xHQ2FsY3VsYXRlcyB0aGUgaW50cmluc2ljIGNvc3Qgb2YgdGhlIHRyYW5zYWN0aW9uIHRoYXQgaXMgY2hhcmdlZCBiZWZvcmWUhZSBlH2UKGgFaAZoJGqzCQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkarAJAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGp8CQAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGopBQAAaCZOaChOaCRq3wUAAHViaioFAAApgZR9lChoBWgGaAddlChqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYw9Om9iajpgcmVjb3Zlcl9zZW5kZXIgPGV0aGVyZXVtLmRhb19mb3JrLnNwZWMucmVjb3Zlcl9zZW5kZXI+YJRoB12UaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAVq1gkAAGgHXZRoH4wOcmVjb3Zlcl9zZW5kZXKUhZSBlH2UKGgFaAZoJGrbCQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRq2AkAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwlZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5yZWNvdmVyX3NlbmRlcpSMCHJlZnRpdGxllIwlZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5yZWNvdmVyX3NlbmRlcpR1aDhoFGgmTmgoTmgkatQJAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRq0QkAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkas4JAAB1YmovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjC9FeHRyYWN0cyB0aGUgc2VuZGVyIGFkZHJlc3MgZnJvbSBhIHRyYW5zYWN0aW9uLpRoB12UaB+ML0V4dHJhY3RzIHRoZSBzZW5kZXIgYWRkcmVzcyBmcm9tIGEgdHJhbnNhY3Rpb24ulIWUgZR9lChoBWgGaCRqBQoAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGoCCgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqzgkAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqKQUAAGgmTmgoTmgkat8FAAB1YmoqBQAAKYGUfZQoaAVoBmgHXZQoai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMOTpvYmo6YHNpZ25pbmdfaGFzaCA8ZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5zaWduaW5nX2hhc2g+YJRoB12UaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAVqKAoAAGgHXZRoH4wMc2lnbmluZ19oYXNolIWUgZR9lChoBWgGaCRqLQoAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkaioKAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMI2V0aGVyZXVtLmRhb19mb3JrLnNwZWMuc2lnbmluZ19oYXNolIwIcmVmdGl0bGWUjCNldGhlcmV1bS5kYW9fZm9yay5zcGVjLnNpZ25pbmdfaGFzaJR1aDhoFGgmTmgoTmgkaiYKAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqIwoAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkaiAKAAB1YmovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjDhDb21wdXRlIHRoZSBoYXNoIG9mIGEgdHJhbnNhY3Rpb24gdXNlZCBpbiB0aGUgc2lnbmF0dXJlLpRoB12UaB+MOENvbXB1dGUgdGhlIGhhc2ggb2YgYSB0cmFuc2FjdGlvbiB1c2VkIGluIHRoZSBzaWduYXR1cmUulIWUgZR9lChoBWgGaCRqVwoAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGpUCgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqIAoAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqKQUAAGgmTmgoTmgkat8FAAB1YmoqBQAAKYGUfZQoaAVoBmgHXZQoai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMRzpvYmo6YGNvbXB1dGVfaGVhZGVyX2hhc2ggPGV0aGVyZXVtLmRhb19mb3JrLnNwZWMuY29tcHV0ZV9oZWFkZXJfaGFzaD5glGgHXZRoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBWp6CgAAaAddlGgfjBNjb21wdXRlX2hlYWRlcl9oYXNolIWUgZR9lChoBWgGaCRqfwoAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkanwKAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMKmV0aGVyZXVtLmRhb19mb3JrLnNwZWMuY29tcHV0ZV9oZWFkZXJfaGFzaJSMCHJlZnRpdGxllIwqZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5jb21wdXRlX2hlYWRlcl9oYXNolHVoOGgUaCZOaChOaCRqeAoAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGp1CgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqcgoAAHViai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMJENvbXB1dGVzIHRoZSBoYXNoIG9mIGEgYmxvY2sgaGVhZGVyLpRoB12UaB+MJENvbXB1dGVzIHRoZSBoYXNoIG9mIGEgYmxvY2sgaGVhZGVyLpSFlIGUfZQoaAVoBmgkaqkKAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6NTY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqpgoAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkanIKAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aikFAABoJk5oKE5oJGrfBQAAdWJqKgUAACmBlH2UKGgFaAZoB12UKGovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjD86b2JqOmBjaGVja19nYXNfbGltaXQgPGV0aGVyZXVtLmRhb19mb3JrLnNwZWMuY2hlY2tfZ2FzX2xpbWl0PmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFaswKAABoB12UaB+MD2NoZWNrX2dhc19saW1pdJSFlIGUfZQoaAVoBmgkatEKAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGrOCgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjCZldGhlcmV1bS5kYW9fZm9yay5zcGVjLmNoZWNrX2dhc19saW1pdJSMCHJlZnRpdGxllIwmZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5jaGVja19nYXNfbGltaXSUdWg4aBRoJk5oKE5oJGrKCgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkascKAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGrECgAAdWJqLwUAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYwkVmFsaWRhdGVzIHRoZSBnYXMgbGltaXQgZm9yIGEgYmxvY2sulGgHXZRoH4wkVmFsaWRhdGVzIHRoZSBnYXMgbGltaXQgZm9yIGEgYmxvY2sulIWUgZR9lChoBWgGaCRq+woAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjLUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9kYW9fZm9yay9zcGVjL2luZGV4LnJzdDo1Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGr4CgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGouBQAAaCZOaChOaCRqxAoAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqKQUAAGgmTmgoTmgkat8FAAB1YmoqBQAAKYGUfZQoaAVoBmgHXZQoai8FAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMVTpvYmo6YGNhbGN1bGF0ZV9ibG9ja19kaWZmaWN1bHR5IDxldGhlcmV1bS5kYW9fZm9yay5zcGVjLmNhbGN1bGF0ZV9ibG9ja19kaWZmaWN1bHR5PmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFah4LAABoB12UaB+MGmNhbGN1bGF0ZV9ibG9ja19kaWZmaWN1bHR5lIWUgZR9lChoBWgGaCRqIwsAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkaiALAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMMWV0aGVyZXVtLmRhb19mb3JrLnNwZWMuY2FsY3VsYXRlX2Jsb2NrX2RpZmZpY3VsdHmUjAhyZWZ0aXRsZZSMMWV0aGVyZXVtLmRhb19mb3JrLnNwZWMuY2FsY3VsYXRlX2Jsb2NrX2RpZmZpY3VsdHmUdWg4aBRoJk5oKE5oJGocCwAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMtS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2Rhb19mb3JrL3NwZWMvaW5kZXgucnN0OjU2OjxhdXRvc3VtbWFyeT6UaChLAWgkahkLAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ai4FAABoJk5oKE5oJGoWCwAAdWJqLwUAACmBlH2U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WSA8ZXRoZXJldW0uZGFvX2Zvcmsuc3BlYy5HRU5FU0lTX0RJRkZJQ1VMVFk+YFyUaAddlChoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBYxFOm9iajpgR0VORVNJU19ESUZGSUNVTFRZIDxldGhlcmV1bS5kYW9fZm9yay5zcGVjLkdFTkVTSVNfRElGRklDVUxUWT5glGgHXZRoH4wSR0VORVNJU19ESUZGSUNVTFRZlIWUgZR9lChoBWgGaCRqwgwAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkar8MAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMKWV0aGVyZXVtLmRhb19mb3JrLnNwZWMuR0VORVNJU19ESUZGSUNVTFRZlIwIcmVmdGl0bGWUjClldGhlcmV1bS5kYW9fZm9yay5zcGVjLkdFTkVTSVNfRElGRklDVUxUWZR1aDhoFGgmTmgoTmgkarsMAAB1YmgfaAaFlIGUfZQoaAVoBmgkarsMAABoJWgDaCZoJ2goSwB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJoy1L2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy9pbmRleC5yc3Q6Njg6PGF1dG9zdW1tYXJ5PpRoKEsBaCRquAwAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkarUMAAB1YmovBQAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFaAZoB12UaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCZOaChOaCRq7QwAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqLgUAAGgmTmgoTmgkarUMAAB1YmVoKX2UKGgrXZRoLV2UaDJd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CiAgICAjIHRoZSBjdXJyZW50IGJsb2NrIGFzIHBhcmVudCBoYXNoLgogICAgbW9zdF9yZWNlbnRfYmxvY2tfaGFzaCA9IGtlY2NhazI1NihybHAuZW5jb2RlKHJlY2VudF9ibG9ja3NbLTFdLmhlYWRlcikpCiAgICByZWNlbnRfYmxvY2tfaGFzaGVzLmFwcGVuZChtb3N0X3JlY2VudF9ibG9ja19oYXNoKQoKICAgIHJldHVybiByZWNlbnRfYmxvY2tfaGFzaGVzCpRoB12UaB9Y3wIAAGRlZiBnZXRfbGFzdF8yNTZfYmxvY2tfaGFzaGVzKGNoYWluOiBCbG9ja0NoYWluKSAtPiBMaXN0W0hhc2gzMl06CiAgICByZWNlbnRfYmxvY2tzID0gY2hhaW4uYmxvY2tzWy0yNTU6XQogICAgIyBUT0RPOiBUaGlzIGZ1bmN0aW9uIGhhcyBub3QgYmVlbiB0ZXN0ZWQgcmlnb3JvdXNseQogICAgaWYgbGVuKHJlY2VudF9ibG9ja3MpID09IDA6CiAgICAgICAgcmV0dXJuIFtdCgogICAgcmVjZW50X2Jsb2NrX2hhc2hlcyA9IFtdCgogICAgZm9yIGJsb2NrIGluIHJlY2VudF9ibG9ja3M6CiAgICAgICAgcHJldl9ibG9ja19oYXNoID0gYmxvY2suaGVhZGVyLnBhcmVudF9oYXNoCiAgICAgICAgcmVjZW50X2Jsb2NrX2hhc2hlcy5hcHBlbmQocHJldl9ibG9ja19oYXNoKQoKICAgICMgV2UgYXJlIGNvbXB1dGluZyB0aGUgaGFzaCBvbmx5IGZvciB0aGUgbW9zdCByZWNlbnQgYmxvY2sgYW5kIG5vdCBmb3IKICAgICMgdGhlIHJlc3Qgb2YgdGhlIGJsb2NrcyBhcyB0aGV5IGhhdmUgc3VjY2Vzc29ycyB3aGljaCBoYXZlIHRoZSBoYXNoIG9mCiAgICAjIHRoZSBjdXJyZW50IGJsb2NrIGFzIHBhcmVudCBoYXNoLgogICAgbW9zdF9yZWNlbnRfYmxvY2tfaGFzaCA9IGtlY2NhazI1NihybHAuZW5jb2RlKHJlY2VudF9ibG9ja3NbLTFdLmhlYWRlcikpCiAgICByZWNlbnRfYmxvY2tfaGFzaGVzLmFwcGVuZChtb3N0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ICAgICAgIHRyYW5zYWN0aW9uc19yb290LAogICAgICAgIHJlY2VpcHRfcm9vdCwKICAgICAgICBibG9ja19sb2dzX2Jsb29tLAogICAgICAgIHN0YXRlLAogICAgKSA9IGFwcGx5X2JvZHkoCiAgICAgICAgY2hhaW4uc3RhdGUsCiAgICAgICAgZ2V0X2xhc3RfMjU2X2Jsb2NrX2hhc2hlcyhjaGFpbiksCiAgICAgICAgYmxvY2suaGVhZGVyLmNvaW5iYXNlLAogICAgICAgIGJsb2NrLmhlYWRlci5udW1iZXIsCiAgICAgICAgYmxvY2suaGVhZGVyLmdhc19saW1pdCwKICAgICAgICBibG9jay5oZWFkZXIudGltZXN0YW1wLAogICAgICAgIGJsb2NrLmhlYWRlci5kaWZmaWN1bHR5LAogICAgICAgIGJsb2NrLnRyYW5zYWN0aW9ucywKICAgICAgICBibG9jay5vbW1lcnMsCiAgICApCiAgICBlbnN1cmUoZ2FzX3VzZWQgPT0gYmxvY2suaGVhZGVyLmdhc191c2VkLCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUodHJhbnNhY3Rpb25zX3Jvb3QgPT0gYmxvY2suaGVhZGVyLnRyYW5zYWN0aW9uc19yb290LCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUoc3RhdGVfcm9vdChzdGF0ZSkgPT0gYmxvY2suaGVhZGVyLnN0YXRlX3Jvb3QsIEludmFsaWRCbG9jaykKICAgIGVuc3VyZShyZWNlaXB0X3Jvb3QgPT0gYmxvY2suaGVhZGVyLnJlY2VpcHRfcm9vdCwgSW52YWxpZEJsb2NrKQogICAgZW5zdXJlKGJsb2NrX2xvZ3NfYmxvb20gPT0gYmxvY2suaGVhZGVyLmJsb29tLCBJbnZhbGlkQmxvY2spCgogICAgY2hhaW4uYmxvY2tzLmFwcGVuZChibG9jaykKICAgIGlmIGxlbihjaGFpbi5ibG9ja3MpID4gMjU1OgogICAgICAgICMgUmVhbCBjbGllbnRzIGhhdmUgdG8gc3RvcmUgbW9yZSBibG9ja3MgdG8gZGVhbCB3aXRoIHJlb3JncywgYnV0IHRoZQogICAgICAgICMgcHJvdG9jb2wgb25seSByZXF1aXJlcyB0aGUgbGFzdCAyNTUKICAgICAgICBjaGFpbi5ibG9ja3MgPSBjaGFpbi5ibG9ja3NbLTI1NTpdCpRoB12UaB9YqgQAAGRlZiBzdGF0ZV90cmFuc2l0aW9uKGNoYWluOiBCbG9ja0NoYWluLCBibG9jazogQmxvY2spIC0+IE5vbmU6CiAgICBwYXJlbnRfaGVhZGVyID0gY2hhaW4uYmxvY2tzWy0xXS5oZWFkZXIKICAgIHZhbGlkYXRlX2hlYWRlcihibG9jay5oZWFkZXIsIHBhcmVudF9oZWFkZXIpCiAgICB2YWxpZGF0ZV9vbW1lcnMoYmxvY2sub21tZXJzLCBibG9jay5oZWFkZXIsIGNoYWluKQogICAgKAogICAgICAgIGdhc191c2VkLAogICAgICAgIHRyYW5zYWN0aW9uc19yb290LAogICAgICAgIHJlY2VpcHRfcm9vdCwKICAgICAgICBibG9ja19sb2dzX2Jsb29tLAogICAgICAgIHN0YXRlLAogICAgKSA9IGFwcGx5X2JvZHkoCiAgICAgICAgY2hhaW4uc3RhdGUsCiAgICAgICAgZ2V0X2xhc3RfMjU2X2Jsb2NrX2hhc2hlcyhjaGFpbiksCiAgICAgICAgYmxvY2suaGVhZGVyLmNvaW5iYXNlLAogICAgICAgIGJsb2NrLmhlYWRlci5udW1iZXIsCiAgICAgICAgYmxvY2suaGVhZGVyLmdhc19saW1pdCwKICAgICAgICBibG9jay5oZWFkZXIudGltZXN0YW1wLAogICAgICAgIGJsb2NrLmhlYWRlci5kaWZmaWN1bHR5LAogICAgICAgIGJsb2NrLnRyYW5zYWN0aW9ucywKICAgICAgICBibG9jay5vbW1lcnMsCiAgICApCiAgICBlbnN1cmUoZ2FzX3VzZWQgPT0gYmxvY2suaGVhZGVyLmdhc191c2VkLCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUodHJhbnNhY3Rpb25zX3Jvb3QgPT0gYmxvY2suaGVhZGVyLnRyYW5zYWN0aW9uc19yb290LCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUoc3RhdGVfcm9vdChzdGF0ZSkgPT0gYmxvY2suaGVhZGVyLnN0YXRlX3Jvb3QsIEludmFsaWRCbG9jaykKICAgIGVuc3VyZShyZWNlaXB0X3Jvb3QgPT0gYmxvY2suaGVhZGVyLnJlY2VpcHRfcm9vdCwgSW52YWxpZEJsb2NrKQogICAgZW5zdXJlKGJsb2NrX2xvZ3NfYmxvb20gPT0gYmxvY2suaGVhZGVyLmJsb29tLCBJbnZhbGlkQmxvY2spCgogICAgY2hhaW4uYmxvY2tzLmFwcGVuZChibG9jaykKICAgIGlmIGxlbihjaGFpbi5ibG9ja3MpID4gMjU1OgogICAgICAgICMgUmVhbCBjbGllbnRzIGhhdmUgdG8gc3RvcmUgbW9yZSBibG9ja3MgdG8gZGVhbCB3aXRoIHJlb3JncywgYnV0IHRoZQogICAgICAgICMgcHJvdG9jb2wgb25seSByZXF1aXJlcyB0aGUgbGFzdCAyNTUKICAgICAgICBjaGFpbi5ibG9ja3MgPSBjaGFpbi5ibG9ja3NbLTI1NTpdCpSFlIGUfZQoaAVoBmgkaqEVAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAZzb3VyY2WUjJUvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9zcmMvZXRoZXJldW0vZGFvX2Zvcmsvc3BlYy5weZSMCXhtbDpzcGFjZZRqnQUAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lGoKDgAASwFzjAdsaW5lbm9zlIl1aDhq8g0AAGgmaGtoKEvraCRqcxQAAHViZWgpfZQoaCtdlGqiAgAAYWgtXZRoMl2UjBBzdGF0ZV90cmFuc2l0aW9ulGFoNF2UaDZdlHVoOGgJaCZoa2goS91oJGp9DQAAaCVoA3ViaAopgZR9lChoBWgGaAddlChoDymBlH2UKGgFjA92YWxpZGF0ZV9oZWFkZXKUaAddlGgfjA92YWxpZGF0ZV9oZWFkZXKUhZSBlH2UKGgFaAZoJGrCFQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVo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YXRlX2hlYWRlcihoZWFkZXI6IEhlYWRlciwgcGFyZW50X2hlYWRlcjogSGVhZGVyKSAtPiBOb25lOgogICAgZW5zdXJlKGhlYWRlci50aW1lc3RhbXAgPiBwYXJlbnRfaGVhZGVyLnRpbWVzdGFtcCwgSW52YWxpZEJsb2NrKQogICAgZW5zdXJlKGhlYWRlci5udW1iZXIgPT0gcGFyZW50X2hlYWRlci5udW1iZXIgKyAxLCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUoCiAgICAgICAgY2hlY2tfZ2FzX2xpbWl0KGhlYWRlci5nYXNfbGltaXQsIHBhcmVudF9oZWFkZXIuZ2FzX2xpbWl0KSwKICAgICAgICBJbnZhbGlkQmxvY2ssCiAgICApCiAgICBlbnN1cmUobGVuKGhlYWRlci5leHRyYV9kYXRhKSA8PSAzMiwgSW52YWxpZEJsb2NrKQoKICAgIGJsb2NrX2RpZmZpY3VsdHkgPSBjYWxjdWxhdGVfYmxvY2tfZGlmZmljdWx0eSgKICAgICAgICBoZWFkZXIubnVtYmVyLAogICAgICAgIGhlYWRlci50aW1lc3RhbXAsCiAgICAgICAgcGFyZW50X2hlYWRlci50aW1lc3RhbXAsCiAgICAgICAgcGFyZW50X2hlYWRlci5kaWZmaWN1bHR5LAogICAgKQogICAgZW5zdXJlKGhlYWRlci5kaWZmaWN1bHR5ID09IGJsb2NrX2RpZmZpY3VsdHksIEludmFsaWRCbG9jaykKCiAgICBibG9ja19wYXJlbnRfaGFzaCA9IGtlY2NhazI1NihybHAuZW5jb2RlKHBhcmVudF9oZWFkZXIpKQogICAgZW5zdXJlKGhlYWRlci5wYXJlbnRfaGFzaCA9PSBibG9ja19wYXJlbnRfaGFzaCwgSW52YWxpZEJsb2NrKQoKICAgIGlmICgKICAgICAgICBoZWFkZXIubnVtYmVyID49IE1BSU5ORVRfRk9SS19CTE9DSwogICAgICAgIGFuZCBoZWFkZXIubnVtYmVyIDwgTUFJTk5FVF9GT1JLX0JMT0NLICsgMTAKICAgICk6CiAgICAgICAgZW5zdXJlKGhlYWRlci5leHRyYV9kYXRhID09IGIiZGFvLWhhcmQtZm9yayIsIEludmFsaWRCbG9jaykKCiAgICB2YWxpZGF0ZV9wcm9vZl9vZl93b3JrKGhlYWRlcikKlGgHXZQoaB9Y4wIAAGRlZiB2YWxpZGF0ZV9oZWFkZXIoaGVhZGVyOiBIZWFkZXIsIHBhcmVudF9oZWFkZXI6IEhlYWRlcikgLT4gTm9uZToKICAgIGVuc3VyZShoZWFkZXIudGltZXN0YW1wID4gcGFyZW50X2hlYWRlci50aW1lc3RhbXAsIEludmFsaWRCbG9jaykKICAgIGVuc3VyZShoZWFkZXIubnVtYmVyID09IHBhcmVudF9oZWFkZXIubnVtYmVyICsgMSwgSW52YWxpZEJsb2NrKQogICAgZW5zdXJlKAogICAgICAgIGNoZWNrX2dhc19saW1pdChoZWFkZXIuZ2FzX2xpbWl0LCBwYXJlbnRfaGVhZGVyLmdhc19saW1pdCksCiAgICAgICAgSW52YWxpZEJsb2NrLAogICAgKQogICAgZW5zdXJlKGxlbihoZWFkZXIuZXh0cmFfZGF0YSkgPD0gMzIsIEludmFsaWRCbG9jaykKCiAgICBibG9ja19kaWZmaWN1bHR5ID0gY2FsY3VsYXRlX2Jsb2NrX2RpZmZpY3VsdHkoCiAgICAgICAgaGVhZGVyLm51bWJlciwKICAgICAgICBoZWFkZXIudGltZXN0YW1wLAogICAgICAgIHBhcmVudF9oZWFkZXIudGltZXN0YW1wLAogICAgICAgIHBhcmVudF9oZWFkZXIuZGlmZmljdWx0eSwKICAgICkKICAgIGVuc3VyZShoZWFkZXIuZGlmZmljdWx0eSA9PSBibG9ja19kaWZmaWN1bHR5LCBJbnZhbGlkQmxvY2spCgogICAgYmxvY2tfcGFyZW50X2hhc2ggPSBrZWNjYWsyNTYocmxwLmVuY29kZShwYXJlbnRfaGVhZGVyKSkKICAgIGVuc3VyZShoZWFkZXIucGFyZW50X2hhc2ggPT0gYmxvY2tfcGFyZW50X2hhc2gsIEludmFsaWRCbG9jaykKCiAgICCUhZSBlH2UKGgFaAZoJGrbFgAAaCVoA2gmaCdoKEsAdWJqXxAAACmBlH2UKGgFaAZoB12UaB+MtWlmICgKICAgICAgICBoZWFkZXIubnVtYmVyID49IE1BSU5ORVRfRk9SS19CTE9DSwog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NF2UaDZdlIwGZG9tYWlulGpkFwAAjAdvYmp0eXBllGoqGgAAjAhkZXNjdHlwZZRqKhoAAIwHbm9pbmRleJSJdWg4aq4NAABoJk5oKE5oJGoLFwAAdWJq8w0AACmBlH2UKGgFWAMCAABkZWYgZ2VuZXJhdGVfaGVhZGVyX2hhc2hfZm9yX3BvdyhoZWFkZXI6IEhlYWRlcikgLT4gSGFzaDMyOgogICAgaGVhZGVyX2RhdGFfd2l0aG91dF9wb3dfYXJ0ZWZhY3RzID0gWwogICAgICAgIGhlYWRlci5wYXJlbnRfaGFzaCwKICAgICAgICBoZWFkZXIub21tZXJzX2hhc2gsCiAgICAgICAgaGVhZGVyLmNvaW5iYXNlLAogICAgICAgIGhlYWRlci5zdGF0ZV9yb290LAogICAgICAgIGhlYWRlci50cmFuc2FjdGlvbnNfcm9vdCwKICAgICAgICBoZWFkZXIucmVjZWlwdF9yb290LAogICAgICAgIGhlYWRlci5ibG9vbSwKICAgICAgICBoZWFkZXIuZGlmZmljdWx0eSwKICAgICAgICBoZWFkZXIubnVtYmVyLAogICAgICAgIGhlYWRlci5nYXNfbGltaXQsCiAgICAgICAgaGVhZGVyLmdhc191c2VkLAogICAgICAgIGhlYWRlci50aW1lc3RhbXAsCiAgICAgICAgaGVhZGVyLmV4dHJhX2RhdGEsCiAgICBdCgogICAgcmV0dXJuIHJscC5ybHBfaGFzaChoZWFkZXJfZGF0YV93aXRob3V0X3Bvd19hcnRlZmFjdHMpCpRoB12UaB9YAwIAAGRlZiBnZW5lcmF0ZV9oZWFkZXJfaGFzaF9mb3JfcG93KGhlYWRlcjogSGVhZGVyKSAtPiBIYXNoMzI6CiAgICBoZWFkZXJfZGF0YV93aXRob3V0X3Bvd19hcnRlZmFjdHMgPSBbCiAgICAgICAgaGVhZGVyLnBhcmVudF9oYXNoLAogICAgICAgIGhlYWRlci5vbW1lcnNfaGFzaCwKICAgICAgICBoZWFkZXIuY29pbmJhc2UsCiAgICAgICAgaGVhZGVyLnN0YXRlX3Jvb3QsCiAgICAgICAgaGVhZGVyLnRyYW5zYWN0aW9uc19yb290LAogICAgICAgIGhlYWRlci5yZWNlaXB0X3Jvb3QsCiAgICAgICAgaGVhZGVyLmJsb29tLAogICAgICAgIGhlYWRlci5kaWZmaWN1bHR5LAogICAgICAgIGhlYWRlci5udW1iZXIsCiAgICAgICAgaGVhZGVyLmdhc19saW1pdCwKICAgICAgICBoZWFkZXIuZ2FzX3VzZWQsCiAgICAgICAgaGVhZGVyLnRpbWVzdGFtcCwKICAgICAgICBoZWFkZXIuZXh0cmFfZGF0YSwKICAgIF0KCiAgICByZXR1cm4gcmxwLnJscF9oYXNoKGhlYWRlcl9kYXRhX3dpdGhvdXRfcG93X2FydGVmYWN0cykKlIWUgZR9lChoBWgGaCRqMhoAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9kYW9fZm9yay9zcGVjLnB5lIwJeG1sOnNwYWNllGqdBQAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UagoOAABLAXOMB2xpbmVub3OUiXVoOGryDQAAaCZoa2goTSUBaCRqCxcAAHViZWgpfZQoaCtdlGrmAgAAYWgtXZRoMl2UjBxnZW5lcmF0ZV9oZWFkZXJfaGFzaF9mb3JfcG93lGFoNF2UaDZdlHVoOGgJaCZoa2goTQMBaCRqfQ0AAGglaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwWdmFsaWRhdGVfcHJvb2Zfb2Zfd29ya5RoB12UaB+MFnZhbGlkYXRlX3Byb29mX29mX3dvcmuUhZSBlH2UKGgFaAZoJGpTGgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGgOaCZoa2goTSoBaCRqUBoAAHViaG4pgZR9lChoBWgGaAddlGgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMB2VudHJpZXOUXZR1aDhobWgmTmgoTmgkalAa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d29yayhoZWFkZXI6IEhlYWRlcikgLT4gTm9uZToKICAgIGhlYWRlcl9oYXNoID0gZ2VuZXJhdGVfaGVhZGVyX2hhc2hfZm9yX3BvdyhoZWFkZXIpCiAgICAjIFRPRE86IE1lbW9pemUgdGhpcyBzb21ld2hlcmUgYW5kIHJlYWQgZnJvbSB0aGF0IGRhdGEgaW5zdGVhZCBvZgogICAgIyBjYWxjdWxhdGluZyBjYWNoZSBmb3IgZXZlcnkgYmxvY2sgdmFsaWRhdGlvbi4KICAgIGNhY2hlID0gZ2VuZXJhdGVfY2FjaGUoaGVhZGVyLm51bWJlcikKICAgIG1peF9kaWdlc3QsIHJlc3VsdCA9IGhhc2hpbW90b19saWdodCgKICAgICAgICBoZWFkZXJfaGFzaCwgaGVhZGVyLm5vbmNlLCBjYWNoZSwgZGF0YXNldF9zaXplKGhlYWRlci5udW1iZXIpCiAgICApCgogICAgZW5zdXJlKG1peF9kaWdlc3QgPT0gaGVhZGVyLm1peF9kaWdlc3QsIEludmFsaWRCbG9jaykKICAgIGVuc3VyZSgKICAgICAgICBVaW50LmZyb21fYmVfYnl0ZXMocmVzdWx0KSA8PSAoVTI1Nl9DRUlMX1ZBTFVFIC8vIGhlYWRlci5kaWZmaWN1bHR5KSwKICAgICAgICBJbnZhbGlkQmxvY2ssCiAgICApCpRoB12UaB9YNgIAAGRlZiB2YWxpZGF0ZV9wcm9vZl9vZl93b3JrKGhlYWRlcjogSGVhZGVyKSAtPiBOb25lOgogICAgaGVhZGVyX2hhc2ggPSBnZW5lcmF0ZV9oZWFkZXJfaGFzaF9mb3JfcG93KGhlYWRlcikKICAgICMgVE9ETzogTWVtb2l6ZSB0aGlzIHNvbWV3aGVyZSBhbmQgcmVhZCBmcm9tIHRoYXQgZGF0YSBpbnN0ZWFkIG9mCiAgICAjIGNhbGN1bGF0aW5nIGNhY2hlIGZvciBldmVyeSBibG9jayB2YWxpZGF0aW9uLgogICAgY2FjaGUgPSBnZW5lcmF0ZV9jYWNoZShoZWFkZXIubnVtYmVyKQogICAgbWl4X2RpZ2VzdCwgcmVzdWx0ID0gaGFzaGltb3RvX2xpZ2h0KAogICAgICAgIGhlYWRlcl9oYXNoLCBoZWFkZXIubm9u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aDRdlGg2XZR1aDhqBRIAAGgmTmgoTmgkamkcAAB1YmoGEgAAKYGUfZQoaAVoBmgHXZQoagsSAAApgZR9lChoBYwHUmV0dXJuc5RoB12UaB+MB1JldHVybnOUhZSBlH2UKGgFaAZoJGoAHgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGoKEgAAaCZoa2goSwBoJGr9HQAAdWJqGxIAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBVjYAQAAZ2FzX2F2YWlsYWJsZSAoZXRoMXNwZWMuYmFzZV90eXBlcy5VaW50KSAtLSBSZW1haW5pbmcgZ2FzIGFmdGVyIGFsbCB0cmFuc2FjdGlvbnMgaGF2ZSBiZWVuIGV4ZWN1dGVkLgoKdHJhbnNhY3Rpb25zX3Jvb3QgKGV0aDFzcGVjLmV0aF90eXBlcy5Sb290KSAtLSBUcmllIHJvb3Qgb2YgYWxsIHRoZSB0cmFuc2FjdGlvbnMgaW4gdGhlIGJsb2NrLgoKcmVjZWlwdF9yb290IChldGgxc3BlYy5ldGhfdHlwZXMuUm9vdCkgLS0gVHJpZSByb290IG9mIGFsbCB0aGUgcmVjZWlwdHMgaW4gdGhlIGJsb2NrLgoKYmxvY2tfbG9nc19ibG9vbSAoQmxvb20pIC0tIExvZ3MgYmxvb20gb2YgYWxsIHRoZSBsb2dzIGluY2x1ZGVkIGluIGFsbCB0aGUgdHJhbnNhY3Rpb25zIG9mIHRoZQpibG9jay4KCnN0YXRlIChldGgxc3BlYy5ldGhfdHlwZXMuU3RhdGUpIC0tIFN0YXRlIGFmdGVyIGFsbCB0cmFuc2FjdGlvbnMgaGF2ZSBiZWVuIGV4ZWN1dGVkLpRoB12UaKMpgZR9lChoBWgGaAddlChoqCmBlH2UKGgFjGoqKmdhc19hdmFpbGFibGUqKiAoYGV0aDFzcGVjLmJhc2VfdHlwZXMuVWludGApIC0tIFJlbWFpbmluZyBnYXMgYWZ0ZXIgYWxsIHRyYW5zYWN0aW9ucyBoYXZlIGJlZW4gZXhlY3V0ZWQulGgHXZRorSmBlH2UKGgFahoeAABoB12UKGplEgAAKYGUfZQoaAWMESoqZ2FzX2F2YWlsYWJsZSoqlGgHXZRoH4wNZ2FzX2F2YWlsYWJsZZSF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ZiBhcHBseV9ib2R5KAogICAgc3RhdGU6IFN0YXRlLAogICAgYmxvY2tfaGFzaGVzOiBMaXN0W0hhc2gzMl0sCiAgICBjb2luYmFzZTogQWRkcmVzcywKICAgIGJsb2NrX251bWJlcjogVWludCwKICAgIGJsb2NrX2dhc19saW1pdDogVWludCwKICAgIGJsb2NrX3RpbWU6IFUyNTYsCiAgICBibG9ja19kaWZmaWN1bHR5OiBVaW50LAogICAgdHJhbnNhY3Rpb25zOiBUdXBsZVtUcmFuc2FjdGlvbiwgLi4uXSwKICAgIG9tbWVyczogVHVwbGVbSGVhZGVyLCAuLi5dLAopIC0+IFR1cGxlW1VpbnQsIFJvb3QsIFJvb3QsIEJsb29tLCBTdGF0ZV06CiAgICBnYXNfYXZhaWxhYmxlID0gYmxvY2tfZ2FzX2xpbWl0CiAgICB0cmFuc2FjdGlvbnNfdHJpZTogVHJpZVtCeXRlcywgT3B0aW9uYWxbVHJhbnNhY3Rpb25dXSA9IFRyaWUoCiAgICAgICAgc2VjdXJlZD1GYWxzZSwgZGVmYXVsdD1Ob25lCiAgICApCiAgICByZWNlaXB0c190cmllOiBUcmllW0J5dGVzLCBPcHRpb25hbFtSZWNlaXB0XV0gPSBUcmllKAogICAgICAgIHNlY3VyZWQ9RmFsc2UsIGRlZmF1bHQ9Tm9uZQogICAgKQogICAgYmxvY2tfbG9nczogVHVwbGVbTG9nLCAuLi5dID0gKCkKCiAgICBmb3IgaSwgdHggaW4gZW51bWVyYXRlKHRyYW5zYWN0aW9ucyk6CiAgICAgICAgdHJpZV9zZXQodHJhbnNhY3Rpb25zX3RyaWUsIHJscC5lbmNvZGUoVWludChpKSksIHR4KQoKICAgICAgICBlbnN1cmUodHguZ2FzIDw9IGdhc19hdmFpbGFibGUsIEludmFsaWRCbG9jaykKICAgICAgICBzZW5kZXJfYWRkcmVzcyA9IHJlY292ZXJfc2VuZGVyKHR4KQoKICAgICAgICBlbnYgPSB2bS5FbnZpcm9ubWVudCgKICAgICAgICAgICAgY2FsbGVyPXNlbmRlcl9hZGRyZXNzLAogICAgICAgICAgICBvcmlnaW49c2VuZGVyX2FkZHJlc3MsCiAgICAgICAgICAgIGJsb2NrX2hhc2hlcz1ibG9ja19oYXNoZXMsCiAgICAgICAgICAgIGNvaW5iYXNlPWNvaW5iYXNlLAogICAgICAgICAgICBudW1iZXI9YmxvY2tfbnVtYmVyLAogICAgICAgICAgICBnYXNfbGltaXQ9YmxvY2tfZ2FzX2xpbWl0LAogICAgICAgICAgICBnYXNfcHJpY2U9dHguZ2FzX3ByaWNlLAogICAgICAgICAgICB0aW1lPWJsb2NrX3RpbWUsCiAgICAgICAgICAgIGRpZmZpY3VsdHk9YmxvY2tfZGlmZmljdWx0eSwKICAgICAgICAgICAgc3RhdGU9c3RhdGUsCiAgICAgICAgKQoKICAgICAgICBnYXNfdXNlZCwgbG9ncyA9IHByb2Nlc3NfdHJhbnNhY3Rpb24oZW52LCB0eCkKICAgICAgICBnYXNfYXZhaWxhYmxlIC09IGdhc191c2VkCgogICAgICAgIHRyaWVfc2V0KAogICAgICAgICAgICByZWNlaXB0c190cmllLAogICAgICAgICAgICBybHAuZW5jb2RlKFVpbnQoaSkpLAogICAgICAgICAgICBSZWNlaXB0KAogICAgICAgICAgICAgICAgcG9zdF9zdGF0ZT1zdGF0ZV9yb290KHN0YXRlKSwKICAgICAgICAgICAgICAgIGN1bXVsYXRpdmVfZ2FzX3VzZWQ9KGJsb2NrX2dhc19saW1pdCAtIGdhc19hdmFpbGFibGUpLAogICAgICAgICAgICAgICAgYmxvb209bG9nc19ibG9vbShsb2dzKSwKICAgICAgICAgICAgICAgIGxvZ3M9bG9ncywKICAgICAgICAgICAgKSwKICAgICAgICApCiAgICAgICAgYmxvY2tfbG9ncyArPSBsb2dzCgogICAgcGF5X3Jld2FyZHMoc3RhdGUsIGJsb2NrX251bWJlciwgY29pbmJhc2UsIG9tbWVycykKCiAgICBnYXNfcmVtYWluaW5nID0gYmxvY2tfZ2FzX2xpbWl0IC0gZ2FzX2F2YWlsYWJsZQoKICAgIGJsb2NrX2xvZ3NfYmxvb20gPSBsb2dzX2Jsb29tKGJsb2NrX2xvZ3MpCgogICAgcmV0dXJuICgKICAgICAgICBnYXNfcmVtYWluaW5nLAogICAgICAgIHJvb3QodHJhbnNhY3Rpb25zX3RyaWUpLAogICAgICAgIHJvb3QocmVjZWlwdHNfdHJpZSksCiAgICAgICAgYmxvY2tfbG9nc19ibG9vbSwKICAgICAgICBzdGF0ZSwKICAgICkKlGgHXZRoH1hwBwAAZGVmIGFwcGx5X2JvZHkoCiAgICBzdGF0ZTogU3RhdGUsCiAgICBibG9ja19oYXNoZXM6IExpc3RbSGFzaDMyXSwKICAgIGNvaW5iYXNlOiBBZGRyZXNzLAogICAgYmxvY2tfbnVtYmVyOiBVaW50LAogICAgYmxvY2tfZ2FzX2xpbWl0OiBVaW50LAogICAgYmxvY2tfdGltZTogVTI1NiwKICAgIGJsb2NrX2RpZmZpY3VsdHk6IFVpbnQsCiAgICB0cmFuc2FjdGlvbnM6IFR1cGxlW1RyYW5zYWN0aW9uLCAuLi5dLAogICAgb21tZXJzOiBUdXBsZVtIZWFkZXIsIC4uLl0sCikgLT4gVHVwbGVbVWludCwgUm9vdCwgUm9vdCwgQmxvb20sIFN0YXRlXToKICAgIGdhc19hdmFpbGFibGUgPSBibG9ja19nYXNfbGltaXQKICAgIHRyYW5zYWN0aW9uc190cmllOiBUcmllW0J5dGVzLCBPcHRpb25hbFtUcmFuc2FjdGlvbl1dID0gVHJpZSgKICAgICAgICBzZWN1cmVkPUZhbHNlLCBkZWZhdWx0PU5vbmUKICAgICkKICAgIHJlY2VpcHRzX3RyaWU6IFRyaWVbQnl0ZXMsIE9wdGlvbmFsW1JlY2VpcHRdXSA9IFRyaWUoCiAgICAgICAgc2VjdXJlZD1GYWxzZSwgZGVmYXVsdD1Ob25lCiAgICApCiAgICBibG9ja19sb2dzOiBUdXBsZVtMb2csIC4uLl0gPSAoKQoKICAgIGZvciBpLCB0eCBpbiBlbnVtZXJhdGUodHJhbnNhY3Rpb25zKToKICAgICAgICB0cmllX3NldCh0cmFuc2FjdGlvbnNfdHJpZSwgcmxwLmVuY29kZShVaW50KGkpKSwgdHgpCgogICAgICAgIGVuc3VyZSh0eC5nYXMgPD0gZ2FzX2F2YWlsYWJsZSwgSW52YWxpZEJsb2NrKQogICAgICAgIHNlbmRlcl9hZGRyZXNzID0gcmVjb3Zlcl9zZW5kZXIodHgpCgogICAgICAgIGVudiA9IHZtLkVudmlyb25tZW50KAogICAgICAgICAgICBjYWxsZXI9c2VuZGVyX2FkZHJlc3MsCiAgICAgICAgICAgIG9yaWdpbj1zZW5kZXJfYWRkcmVzcywKICAgICAgICAgICAgYmxvY2tfaGFzaGVzPWJsb2NrX2hhc2hlcywKICAgICAgICAgICAgY29pbmJhc2U9Y29pbmJhc2UsCiAgICAgICAgICAgIG51bWJlcj1ibG9ja19udW1iZXIsCiAgICAgICAgICAgIGdhc19saW1pdD1ibG9ja19nYXNfbGltaXQsCiAgICAgICAgICAgIGdhc19wcmljZT10eC5nYXNfcHJpY2UsCiAgICAgICAgICAgIHRpbWU9YmxvY2tfdGltZSwKICAgICAgICAgICAgZGlmZmljdWx0eT1ibG9ja19kaWZmaWN1bHR5LAogICAgICAgICAgICBzdGF0ZT1zdGF0ZSwKICAgICAgICApCgogICAgICAgIGdhc191c2VkLCBsb2dzID0gcHJvY2Vzc190cmFuc2FjdGlvbihlbnYsIHR4KQogICAgICAgIGdhc19hdmFpbGFibGUgLT0gZ2FzX3VzZWQKCiAgICAgICAgdHJpZV9zZXQoCiAgICAgICAgICAgIHJlY2VpcHRzX3RyaWUsCiAgICAgICAgICAgIHJscC5lbmNvZGUoVWludChpKSksCiAgICAgICAgICAgIFJlY2VpcHQoCiAgICAgICAgICAgICAgICBwb3N0X3N0YXRlPXN0YXRlX3Jvb3Qoc3RhdGUpLAogICAgICAgICAgICAgICAgY3VtdWxhdGl2ZV9nYXNfdXNlZD0oYmxvY2tfZ2FzX2xpbWl0IC0gZ2FzX2F2YWlsYWJsZSksCiAgICAgICAgICAgICAgICBibG9vbT1sb2dzX2Jsb29tKGxvZ3MpLAogICAgICAgICAgICAgICAgbG9ncz1sb2dzLAogICAgICAgICAgICApLAogICAgICAgICkKICAgICAgICBibG9ja19sb2dzICs9IGxvZ3MKCiAgICBwYXlfcmV3YXJkcyhzdGF0ZSwgYmxvY2tfbnVtYmVyLCBjb2luYmFzZSwgb21tZXJzKQoKICAgIGdhc19yZW1haW5pbmcgPSBibG9ja19n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ZEJsb2NrKQogICAgICAgIG9tbWVyX3BhcmVudF9oZWFkZXIgPSBjaGFpbi5ibG9ja3NbCiAgICAgICAgICAgIC0oYmxvY2tfaGVhZGVyLm51bWJlciAtIG9tbWVyLm51bWJlcikgLSAxCiAgICAgICAgXS5oZWFkZXIKICAgICAgICB2YWxpZGF0ZV9oZWFkZXIob21tZXIsIG9tbWVyX3BhcmVudF9oZWFkZXIpCgogICAgIyBDaGVjayB0aGF0IHRoZXJlIGNhbiBiZSBvbmx5IGF0IG1vc3QgMiBvbW1lcnMgZm9yIGEgYmxvY2suCiAgICBlbnN1cmUobGVuKG9tbWVycykgPD0gMiwgSW52YWxpZEJsb2NrKQoKICAgIG9tbWVyc19oYXNoZXMgPSBbcmxwLnJscF9oYXNoKG9tbWVyKSBmb3Igb21tZXIgaW4gb21tZXJzXQogICAgIyBDaGVjayB0aGF0IHRoZXJlIGFyZSBubyBkdXBsaWNhdGVzIGluIHRoZSBvbW1lcnMgb2YgY3VycmVudCBibG9jawogICAgZW5zdXJlKGxlbihvbW1lcnNfaGFzaGVzKSA9PSBsZW4oc2V0KG9tbWVyc19oYXNoZXMpKSwgSW52YWxpZEJsb2NrKQoKICAgIHJlY2VudF9jYW5vbmljYWxfYmxvY2tzID0gY2hhaW4uYmxvY2tzWy0oTUFYX09NTUVSX0RFUFRIICsgMSkgOl0KICAgIHJlY2VudF9jYW5vbmljYWxfYmxvY2tfaGFzaGVzID0gewogICAgICAgIHJscC5ybHBfaGFzaChibG9jay5oZWFkZXIpIGZvciBibG9jayBpbiByZWNlbnRfY2Fub25pY2FsX2Jsb2NrcwogICAgfQogICAgcmVjZW50X29tbWVyc19oYXNoZXM6IFNldFtIYXNoMzJdID0gc2V0KCkKICAgIGZvciBibG9jayBpbiByZWNlbnRfY2Fub25pY2FsX2Jsb2NrczoKICAgICAgICByZWNlbnRfb21tZXJzX2hhc2hlcyA9IHJlY2VudF9vbW1lcnNfaGFzaGVzLnVuaW9uKAogICAgICAgICAgICB7cmxwLnJscF9oYXNoKG9tbWVyKSBmb3Igb21tZXIgaW4gYmxvY2sub21tZXJzfQogICAgICAgICkKCiAgICBmb3Igb21tZXJfaW5kZXgsIG9tbWVyIGluIGVudW1lcmF0ZShvbW1lcnMpOgogICAgICAgIG9tbWVyX2hhc2ggPSBvbW1lcnNfaGFzaGVzW29tbWVyX2luZGV4XQogICAgICAgICMgVGhlIGN1cnJlbnQgYmxvY2sgc2hvdWxkbid0IGJlIHRoZSBvbW1lcgogICAgICAgIGVuc3VyZShvbW1lcl9oYXNoICE9IGJsb2NrX2hhc2gsIEludmFsaWRCbG9jaykKCiAgICAgICAgIyBPbW1lciBzaG91bGRuJ3QgYmUgb25lIG9mIHRoZSByZWNlbnQgY2Fub25pY2FsIGJsb2NrcwogICAgICAgIGVuc3VyZShvbW1lcl9oYXNoIG5vdCBpbiByZWNlbnRfY2Fub25pY2FsX2Jsb2NrX2hhc2hlcywgSW52YWxpZEJsb2NrKQoKICAgICAgICAjIE9tbWVyIHNob3VsZG4ndCBiZSBvbmUgb2YgdGhlIHVuY2xlcyBtZW50aW9uZWQgaW4gdGhlIHJlY2VudAogICAgICAgICMgY2Fub25pY2FsIGJsb2NrcwogICAgICAgIGVuc3VyZShvbW1lcl9oYXNoIG5vdCBpbiByZWNlbnRfb21tZXJzX2hhc2hlcywgSW52YWxpZEJsb2NrKQoKICAgICAgICAjIE9tbWVyIGFnZSB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgYmxvY2suIEZvciBleGFtcGxlLCBhbiBhZ2Ugb2YKICAgICAgICAjIDEgaW5kaWNhdGVzIHRoYXQgdGhlIG9tbWVyIGlzIGEgc2libGluZyBvZiBwcmV2aW91cyBibG9jay4KICAgICAgICBvbW1lcl9hZ2UgPSBibG9ja19oZWFkZXIubnVtYmVyIC0gb21tZXIubnVtYmVyCiAgICAgICAgZW5zdXJlKDEgPD0gb21tZXJfYWdlIDw9IE1BWF9PTU1FUl9ERVBUSCwgSW52YWxpZEJsb2NrKQoKICAgICAgICBlbnN1cmUoCiAgICAgICAgICAgIG9tbWVyLnBhcmVudF9oYXNoIGluIHJlY2VudF9jYW5vbmljYWxfYmxvY2tfaGFzaGVzLCBJbnZhbGlkQmxvY2sKICAgICAgICApCiAgICAgICAgZW5zdXJlKG9tbWVyLnBhcmVudF9oYXNoICE9IGJsb2NrX2hlYWRlci5wYXJlbnRfaGFzaCwgSW52YWxpZEJsb2NrKQqUaAddlGgfWAEJAABkZWYgdmFsaWRhdGVfb21tZXJzKAogICAgb21tZXJzOiBUdXBsZVtIZWFkZXIsIC4uLl0sIGJsb2NrX2hlYWRlcjogSGVhZGVyLCBjaGFpbjogQmxvY2tDaGFpbgopIC0+IE5vbmU6CiAgICBibG9ja19oYXNoID0gcmxwLnJscF9oYXNoKGJsb2NrX2hlYWRlcikKCiAgICBlbnN1cmUocmxwLnJscF9oYXNoKG9tbWVycykgPT0gYmxvY2tfaGVhZGVyLm9tbWVyc19oYXNoLCBJbnZhbGlkQmxvY2spCgogICAgaWYgbGVuKG9tbWVycykgPT0gMDoKICAgICAgICAjIE5vdGhpbmcgdG8gdmFsaWRhdGUKICAgICAgICByZXR1cm4KCiAgICAjIENoZWNrIHRoYXQgZWFjaCBvbW1lciBzYXRpc2ZpZXMgdGhlIGNvbnN0cmFpbnRzIG9mIGEgaGVhZGVyCiAgICBmb3Igb21tZXIgaW4gb21tZXJzOgogICAgICAgIGVuc3VyZSgxIDw9IG9tbWVyLm51bWJlciA8IGJsb2NrX2hlYWRlci5udW1iZXIsIEludmFsaWRCbG9jaykKICAgICAgICBvbW1lcl9wYXJlbnRfaGVhZGVyID0gY2hhaW4uYmxvY2tzWwogICAgICAgICAgICAtKGJsb2NrX2hlYWRlci5udW1iZXIgLSBvbW1lci5udW1iZXIpIC0gMQogICAgICAgIF0uaGVhZGVyCiAgICAgICAgdmFsaWRhdGVfaGVhZGVyKG9tbWVyLCBvbW1lcl9wYXJlbnRfaGVhZGVyKQoKICAgICMgQ2hlY2sgdGhhdCB0aGVyZSBjYW4gYmUgb25seSBhdCBtb3N0IDIgb21tZXJzIGZvciBhIGJsb2NrLgogICAgZW5zdXJlKGxlbihvbW1lcnMpIDw9IDIsIEludmFsaWRCbG9jaykKCiAgICBvbW1lcnNfaGFzaGVzID0gW3JscC5ybHBfaGFzaChvbW1lcikgZm9yIG9tbWVyIGluIG9tbWVyc10KICAgICMgQ2hlY2sgdGhhdCB0aGVyZSBhcmUgbm8gZHVwbGljYXRlcyBpbiB0aGUgb21tZXJzIG9mIGN1cnJlbnQgYmxvY2sKICAgIGVuc3VyZShsZW4ob21tZXJzX2hhc2hlcykgPT0gbGVuKHNldChvbW1lcnNfaGFzaGVzKSksIEludmFsaWRCbG9jaykKCiAgICByZWNlbnRfY2Fub25pY2FsX2Jsb2NrcyA9IGNoYWluLmJsb2Nrc1stKE1BWF9PTU1FUl9ERVBUSCArIDEpIDpdCiAgICByZWNlbnRfY2Fub25pY2FsX2Jsb2NrX2hhc2hlcyA9IHsKICAgICAgICBybHAucmxwX2hhc2goYmxvY2suaGVhZGVyKSBmb3IgYmxvY2sgaW4gcmVjZW50X2Nhbm9uaWNhbF9ibG9ja3MKICAgIH0KICAgIHJlY2VudF9vbW1lcnNfaGFzaGVzOiBTZXRbSGFzaDMyXSA9IHNldCgpCiAgICBmb3IgYmxvY2sgaW4gcmVjZW50X2Nhbm9uaWNhbF9ibG9ja3M6CiAgICAgICAgcmVjZW50X29tbWVyc19oYXNoZXMgPSByZWNlbnRfb21tZXJzX2hhc2hlcy51bmlvbigKICAgICAgICAgICAge3JscC5ybHBfaGFzaChvbW1lcikgZm9yIG9tbWVyIGluIGJsb2NrLm9tbWVyc30KICAgICAgICApCgogICAgZm9yIG9tbWVyX2luZGV4LCBvbW1lciBpbiBlbnVtZXJhdGUob21tZXJzKToKICAgICAgICBvbW1lcl9oYXNoID0gb21tZXJzX2hhc2hlc1tvbW1lcl9pbmRleF0KICAgICAgICAjIFRoZSBjdXJyZW50IGJsb2NrIHNob3VsZG4ndCBiZSB0aGUgb21tZXIKICAgICAgICBlbnN1cmUob21tZXJfaGFzaCAhPSBibG9ja19oYXNoLCBJbnZhbGlkQmxvY2spCgogICAgICAgICMgT21tZXIgc2hvdWxkbid0IGJlIG9uZSBvZiB0aGUgcmVjZW50IGNhbm9uaWNhbCBibG9ja3MKICAgICAgICBlbnN1cmUob21tZXJfaGFzaCBub3QgaW4gcmVjZW50X2Nhbm9uaWNhbF9ibG9ja19oYXNoZXMsIEludmFsaWRCbG9jaykKCiAgICAgICAgIyBPbW1lciBzaG91bGRuJ3QgYmUgb25lIG9mIHRoZSB1bmNsZXMgbWVudGlvbmVkIGluIHRoZSByZWNlbnQKICAgICAgICAjIGNhbm9uaWNhbCBibG9ja3MKICAgICAgICBlbnN1cmUob21tZXJfaGFzaCBub3QgaW4gcmVjZW50X29tbWVyc19oYXNoZXMsIEludmFsaWRCbG9jaykKCiAgICAgICAgIyBPbW1lciBhZ2Ugd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50IGJsb2NrLiBGb3IgZXhhbXBsZSwgYW4gYWdlIG9mCiAgICAgICAgIyAxIGluZGljYXRlcyB0aGF0IHRoZSBvbW1lciBpcyBhIHNpYmxpbmcgb2YgcHJldmlvdXMgYmxvY2suCiAgICAgICAgb21tZXJfYWdlID0gYmxvY2tfaGVhZGVyLm51bWJlciAtIG9tbWVyLm51bWJlcgogICAgICAgIGVuc3VyZSgxIDw9IG9tbWVyX2FnZSA8PSBNQVhfT01NRVJfREVQVEgsIEludmFsaWRCbG9jaykKCiAgICAgICAgZW5zdXJlKAogICAgICAgICAgICBvbW1lci5wYXJlbnRfaGFzaCBpbiByZWNlbnRfY2Fub25pY2FsX2Jsb2NrX2hhc2hlcywgSW52YWxpZEJsb2NrCiAgICAgICAgKQogICAgICAgIGVuc3VyZShvbW1lci5wYXJlbnRfaGFzaCAhPSBibG9ja19oZWFkZXIucGFyZW50X2hhc2gsIEludmFsaWRCbG9jaykKlIWUgZR9lChoBWgGaCRq1iAAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9kYW9fZm9yay9zcGVjLnB5lIwJeG1sOnNwYWNllGqdBQAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UagoOAABLAXOMB2xpbmVub3OUiXVoOGryDQAAaCZoa2goTW4BaCRqeh8A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IG9tbWVyIGluIG9tbWVyczoKICAgICAgICAjIE9tbWVyIGFnZSB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgYmxvY2suCiAgICAgICAgb21tZXJfYWdlID0gVTI1NihibG9ja19udW1iZXIgLSBvbW1lci5udW1iZXIpCiAgICAgICAgb21tZXJfbWluZXJfcmV3YXJkID0gKCg4IC0gb21tZXJfYWdlKSAqIEJMT0NLX1JFV0FSRCkgLy8gOAogICAgICAgIGNyZWF0ZV9ldGhlcihzdGF0ZSwgb21tZXIuY29pbmJhc2UsIG9tbWVyX21pbmVyX3Jld2FyZCkKlGgHXZRoH1j+AQAAZGVmIHBheV9yZXdhcmRzKAogICAgc3RhdGU6IFN0YXRlLAogICAgYmxvY2tfbnVtYmVyOiBVaW50LAogICAgY29pbmJhc2U6IEFkZHJlc3MsCiAgICBvbW1lcnM6IFR1cGxlW0hlYWRlciwgLi4uXSwKKSAtPiBOb25lOgogICAgbWluZXJfcmV3YXJkID0gQkxPQ0tfUkVXQVJEICsgKGxlbihvbW1lcnMpICogKEJMT0NLX1JFV0FSRCAvLyAzMikpCiAgICBjcmVhdGVfZXRoZXIoc3RhdGUsIGNvaW5iYXNlLCBtaW5lcl9yZXdhcmQpCgogICAgZm9yIG9tbWVyIGluIG9tbWVyczoKICAgICAgICAjIE9tbWVyIGFnZSB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgYmxvY2suCiAgICAgICAgb21tZXJfYWdlID0gVTI1NihibG9ja19udW1iZXIgLSBvbW1lci5udW1iZXIpCiAgICAgICAgb21tZXJfbWluZXJfcmV3YXJkID0gKCg4IC0gb21tZXJfYWdlKSAqIEJMT0NLX1JFV0FSRCkgLy8gOAogICAgICAgIGNyZWF0ZV9ldGhlcihzdGF0ZSwgb21tZXIuY29pbmJhc2UsIG9tbWVyX21pbmVyX3Jld2FyZCkKlIWUgZR9lChoBWgGaCRqkCIAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1l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XZRoNF2UaDZdlHVoOGoaEgAAaCZOaChOaCRqsyMAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqBRIAAGgmTmgoTmgkajcjAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4agASAABoJk5oKE5oJGomIwAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGrcDQAAaCZoa2goTmgkasoiAAB1YmVoKX2UKGgrXZRoLV2UKGofIwAAjAhmdW5jdGlvbpRlaDJdlGg0XZRoNl2UjAZkb21haW6Uah8jAACMB29ianR5cGWUamQkAACMCGRlc2N0eXBllGpkJAAAjAdub2luZGV4lIl1aDhqrg0AAGgmTmgoTmgkaq4iAAB1YmrzDQAAKYGUfZQoaAVYeAYAAGRlZiBwcm9jZXNzX3RyYW5zYWN0aW9uKAogICAgZW52OiB2bS5FbnZpcm9ubWVudCwgdHg6IFRyYW5zYWN0aW9uCikgLT4gVHVwbGVbVTI1NiwgVHVwbGVbTG9nLCAuLi5dXToKICAgIGVuc3VyZSh2YWxpZGF0ZV90cmFuc2FjdGlvbih0eCksIEludmFsaWRCbG9jaykKCiAgICBzZW5kZXIgPSBlbnYub3JpZ2luCiAgICBzZW5kZXJfYWNjb3VudCA9IGdldF9hY2NvdW50KGVudi5zdGF0ZSwgc2VuZGVyKQogICAgZ2FzX2ZlZSA9IHR4LmdhcyAqIHR4Lmdhc19wcmljZQogICAgZW5zdXJlKHNlbmRlcl9hY2NvdW50Lm5vbmNlID09IHR4Lm5vbmNlLCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUoc2VuZGVyX2FjY291bnQuYmFsYW5jZSA+PSBnYXNfZmVlLCBJbnZhbGlkQmxvY2spCgogICAgZ2FzID0gdHguZ2FzIC0gY2FsY3VsYXRlX2ludHJpbnNpY19jb3N0KHR4KQogICAgaW5jcmVtZW50X25vbmNlKGVudi5zdGF0ZSwgc2VuZGVyKQogICAgc2VuZGVyX2JhbGFuY2VfYWZ0ZXJfZ2FzX2ZlZSA9IHNlbmRlcl9hY2NvdW50LmJhbGFuY2UgLSBnYXNfZmVlCiAgICBzZXRfYWNjb3VudF9iYWxhbmNlKGVudi5zdGF0ZSwgc2VuZGVyLCBzZW5kZXJfYmFsYW5jZV9hZnRlcl9nYXNfZmVlKQoKICAgIG1lc3NhZ2UgPSBwcmVwYXJlX21lc3NhZ2UoCiAgICAgICAgc2VuZGVyLAogICAgICAgIHR4LnRvLAogICAgICAgIHR4LnZhbHVlLAogICAgICAgIHR4LmRhdGEsCiAgICAgICAgZ2FzLAogICAgICAgIGVudiwKICAgICkKCiAgICBvdXRwdXQgPSBwcm9jZXNzX21lc3NhZ2VfY2FsbChtZXNzYWdlLCBlbnYpCgogICAgZ2FzX3VzZWQgPSB0eC5nYXMgLSBvdXRwdXQuZ2FzX2xlZnQKICAgIGdhc19yZWZ1bmQgPSBtaW4oZ2FzX3VzZWQgLy8gMiwgb3V0cHV0LnJlZnVuZF9jb3VudGVyKQogICAgZ2FzX3JlZnVuZF9hbW91bnQgPSAob3V0cHV0Lmdhc19sZWZ0ICsgZ2FzX3JlZnVuZCkgKiB0eC5nYXNfcHJpY2UKICAgIHRyYW5zYWN0aW9uX2ZlZSA9ICh0eC5nYXMgLSBvdXRwdXQuZ2FzX2xlZnQgLSBnYXNfcmVmdW5kKSAqIHR4Lmdhc19wcmljZQogICAgdG90YWxfZ2FzX3VzZWQgPSBnYXNfdXNlZCAtIGdhc19yZWZ1bmQKCiAgICAjIHJlZnVuZCBnYXMKICAgIHNlbmRlcl9iYWxhbmNlX2FmdGVyX3JlZnVuZCA9ICgKICAgICAgICBnZXRfYWNjb3VudChlbnYuc3RhdGUsIHNlbmRlcikuYmFsYW5jZSArIGdhc19yZWZ1bmRfYW1vdW50CiAgICApCiAgICBzZXRfYWNjb3VudF9iYWxhbmNlKGVudi5zdGF0ZSwgc2VuZGVyLCBzZW5kZXJfYmFsYW5jZV9hZnRlcl9yZWZ1bmQpCgogICAgIyB0cmFuc2ZlciBtaW5lciBmZWVzCiAgICBjb2luYmFzZV9iYWxhbmNlX2FmdGVyX21pbmluZ19mZWUgPSAoCiAgICAgICAgZ2V0X2FjY291bnQoZW52LnN0YXRlLCBlbnYuY29pbmJhc2UpLmJhbGFuY2UgKyB0cmFuc2FjdGlvbl9mZWUKICAgICkKICAgIHNldF9hY2NvdW50X2JhbGFuY2UoCiAgICAgICAgZW52LnN0YXRlLCBlbnYuY29pbmJhc2UsIGNvaW5iYXNlX2JhbGFuY2VfYWZ0ZXJfbWluaW5nX2ZlZQogICAgKQoKICAgIGZvciBhZGRyZXNzIGluIG91dHB1dC5hY2NvdW50c190b19kZWxldGU6CiAgICAgICAgZGVzdHJveV9hY2NvdW50KGVudi5zdGF0ZSwgYWRkcmVzcykKCiAgICByZXR1cm4gdG90YWxfZ2FzX3VzZWQsIG91dHB1dC5sb2dzCpRoB12UaB9YeAYAAGRlZiBwcm9jZXNzX3RyYW5zYWN0aW9uKAogICAgZW52OiB2bS5FbnZpcm9ubWVudCwgdHg6IFRyYW5zYWN0aW9uCikgLT4gVHVwbGVbVTI1NiwgVHVwbGVbTG9nLCAuLi5dXToKICAgIGVuc3VyZSh2YWxpZGF0ZV90cmFuc2FjdGlvbih0eCksIEludmFsaWRCbG9jaykKCiAgICBzZW5kZXIgPSBlbnYub3JpZ2luCiAgICBzZW5kZXJfYWNjb3VudCA9IGdldF9hY2NvdW50KGVudi5zdGF0ZSwgc2VuZGVyKQogICAgZ2FzX2ZlZSA9IHR4LmdhcyAqIHR4Lmdhc19wcmljZQogICAgZW5zdXJlKHNlbmRlcl9hY2NvdW50Lm5vbmNlID09IHR4Lm5vbmNlLCBJbnZhbGlkQmxvY2spCiAgICBlbnN1cmUoc2VuZGVyX2FjY291bnQuYmFsYW5jZSA+PSBnYXNfZmVlLCBJbnZhbGlkQmxvY2spCgogICAgZ2FzID0gdHguZ2FzIC0gY2FsY3VsYXRlX2ludHJpbnNpY19jb3N0KHR4KQogICAgaW5jcmVtZW50X25vbmNlKGVudi5zdGF0ZSwgc2VuZGVyKQogICAgc2VuZGVyX2JhbGFuY2VfYWZ0ZXJfZ2FzX2ZlZSA9IHNlbmRlcl9hY2NvdW50LmJhbGFuY2UgLSBnYXNfZmVlCiAgICBzZXRfYWNjb3VudF9iYWxhbmNlKGVudi5zdGF0ZSwgc2VuZGVyLCBzZW5kZXJfYmFsYW5jZV9hZnRlcl9nYXNfZmVlKQoKICAgIG1lc3NhZ2UgPSBwcmVwYXJlX21lc3NhZ2UoCiAgICAgICAgc2VuZGVyLAogICAgICAgIHR4LnRvLAogICAgICAgIHR4LnZhbHVlLAogICAgICAgIHR4LmRhdGEsCiAgICAgICAgZ2FzLAogICAgICAgIGVudiwKICAgICkKCiAgICBvdXRwdXQgPSBwcm9jZXNzX21lc3NhZ2VfY2FsbChtZXNzYWdlLCBlbnYpCgogICAgZ2FzX3VzZWQgPSB0eC5nYXMgLSBvdXRwdXQuZ2FzX2xlZnQKICAgIGdhc19yZWZ1bmQgPSBtaW4oZ2FzX3VzZWQgLy8gMiwgb3V0cHV0LnJlZnVuZF9jb3VudGVyKQogICAgZ2FzX3JlZnVuZF9hbW91bnQgPSAob3V0cHV0Lmdhc19sZWZ0ICsgZ2FzX3JlZnVuZCkgKiB0eC5nYXNfcHJpY2UKICAgIHRyYW5zYWN0aW9uX2ZlZSA9ICh0eC5nYXMgLSBvdXRwdXQuZ2FzX2xlZnQgLSBnYXNfcmVmdW5kKSAqIHR4Lmdhc19wcmljZQogICAgdG90YWxfZ2FzX3VzZWQgPSBnYXNfdXNlZCAtIGdhc19yZWZ1bmQKCiAgICAjIHJlZnVuZCBnYXMKICAgIHNlbmRlcl9iYWxhbmNlX2FmdGVyX3JlZnVuZCA9ICgKICAgICAgICBnZXRfYWNjb3VudChlbnYuc3RhdGUsIHNlbmRlcikuYmFsYW5jZSArIGdhc19yZWZ1bmRfYW1vdW50CiAgICApCiAgICBzZXRfYWNjb3VudF9iYWxhbmNlKGVudi5zdGF0ZSwgc2VuZGVyLCBzZW5kZXJfYmFsYW5jZV9hZnRlcl9yZWZ1bmQpCgogICAgIyB0cmFuc2ZlciBtaW5lciBmZWVzCiAgICBjb2luYmFzZV9iYWxhbmNlX2FmdGVyX21pbmluZ19mZWUgPSAoCiAgICAgICAgZ2V0X2FjY291bnQoZW52LnN0YXRlLCBlbnYuY29pbmJhc2UpLmJhbGFuY2UgKyB0cmFuc2FjdGlvbl9mZWUKICAgICkKICAgIHNldF9hY2NvdW50X2JhbGFuY2UoCiAgICAgICAgZW52LnN0YXRlLCBlbnYuY29pbmJhc2UsIGNvaW5iYXNlX2JhbGFuY2VfYWZ0ZXJfbWluaW5nX2ZlZQogICAgKQoKICAgIGZvciBhZGRyZXNzIGluIG91dHB1dC5hY2NvdW50c190b19kZWxldGU6CiAgICAgICAgZGVzdHJveV9hY2NvdW50KGVudi5zdGF0ZSwgYWRk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aDhq3A0AAGgmaGtoKE5oJGoWKgAAdWJlaCl9lChoK12UaC1dlChqUyoAAIwIZnVuY3Rpb26UZWgyXZRoNF2UaDZdlIwGZG9tYWlulGpTKgAAjAdvYmp0eXBllGowKwAAjAhkZXNjdHlwZZRqMCsAAIwHbm9pbmRleJSJdWg4aq4NAABoJk5oKE5oJGr6KQAAdWJq8w0AACmBlH2UKGgFjFxkZWYgY29tcHV0ZV9oZWFkZXJfaGFzaChoZWFkZXI6IEhlYWRlcikgLT4gSGFzaDMyOgogICAgcmV0dXJuIGtlY2NhazI1NihybHAuZW5jb2RlKGhlYWRlcikpCpRoB12UaB+MXGRlZiBjb21wdXRlX2hlYWRlcl9oYXNoKGhlYWRlcjogSGVhZGVyKSAtPiBIYXNoMzI6CiAgICByZXR1cm4ga2VjY2FrMjU2KHJscC5lbmNvZGUoaGVhZGVyKSkKlIWUgZR9lChoBWgGaCRqOCsAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9kYW9fZm9yay9zcGVjLnB5lIwJeG1sOnNwYWNllGqdBQAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UagoOAABLAXOMB2xpbmVub3OUiXVoOGryDQAAaCZoa2goTQMCaCRq+ikAAHViZWgpfZQoaCtdlGo6BAAAYWgtXZRoMl2UjBNjb21wdXRlX2hlYWRlcl9oYXNolGFoNF2UaDZdlHVoOGgJaCZoa2goTfMBaCRqfQ0AAGglaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwPY2hlY2tfZ2FzX2xpbWl0lGgHXZRoH4wPY2hlY2tfZ2FzX2xpbWl0lIWUgZR9lChoBWgGaCRqWSsAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgm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YmVoKX2UKGgrXZRoLV2UKGrHKwAAjAhmdW5jdGlvbpRlaDJdlGg0XZRoNl2UjAZkb21haW6UascrAACMB29ianR5cGWUat4sAACMCGRlc2N0eXBllGreLAAAjAdub2luZGV4lIl1aDhqrg0AAGgmTmgoTmgkalYrAAB1YmrzDQAAKYGUfZQoaAVYgQEAAGRlZiBjaGVja19nYXNfbGltaXQoZ2FzX2xpbWl0OiBVaW50LCBwYXJlbnRfZ2FzX2xpbWl0OiBVaW50KSAtPiBib29sOgogICAgbWF4X2FkanVzdG1lbnRfZGVsdGEgPSBwYXJlbnRfZ2FzX2xpbWl0IC8vIEdBU19MSU1JVF9BREpVU1RNRU5UX0ZBQ1RPUgogICAgaWYgZ2FzX2xpbWl0ID49IHBhcmVudF9nYXNfbGltaXQgKyBtYXhfYWRqdXN0bWVudF9kZWx0YToKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGlmIGdhc19saW1pdCA8PSBwYXJlbnRfZ2FzX2xpbWl0IC0gbWF4X2FkanVzdG1lbnRfZGVsdGE6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpZiBnYXNfbGltaXQgPCBHQVNfTElNSVRfTUlOSU1VTToKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICByZXR1cm4gVHJ1ZQqUaAddlGgfWIEBAABkZWYgY2hlY2tfZ2FzX2xpbWl0KGdhc19saW1pdDogVWludCwgcGFyZW50X2dhc19saW1pdDogVWludCkgLT4gYm9vbDoKICAgIG1heF9hZGp1c3RtZW50X2RlbHRhID0gcGFyZW50X2dhc19saW1pdCAvLyBHQVNfTElNSVRfQURKVVNUTUVOVF9GQUNUT1IKICAgIGlmIGdhc19saW1pdCA+PSBwYXJlbnRfZ2FzX2xpbWl0ICsgbWF4X2FkanVzdG1lbnRfZGVsdGE6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpZiBnYXNfbGltaXQgPD0gcGFyZW50X2dhc19saW1pdCAtIG1heF9hZGp1c3RtZW50X2RlbHRhOgogICAgICAgIHJldHVybiBGYWxzZQogICAgaWYgZ2FzX2xpbWl0IDwgR0FTX0xJTUlUX01JTklNVU06CiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgcmV0dXJuIFRydWUKlIWUgZR9lChoBWgGaCRq5iwAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9kYW9fZm9yay9zcGVjLnB5lIwJeG1sOnNwYWNllGqdBQAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UagoOAABLAXOMB2xpbmVub3OUiXVoOGryDQAAaCZoa2goTRkCaCRqVisAAHViZWgpfZQoaCtdlGpcBAAAYWgtXZRoMl2UjA9jaGVja19nYXNfbGltaXSUYWg0XZRoNl2UdWg4aAloJmhraChNCAJoJGp9DQAAaCVoA3ViaAopgZR9lChoBWgGaAddlChoDymBlH2UKGgFjBpjYWxjdWxhdGVfYmxvY2tfZGlmZmljdWx0eZRoB12UaB+MGmNhbGN1bGF0ZV9ibG9ja19kaWZmaWN1bHR5lIWUgZR9lChoBWgGaCRqBy0AAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKE0eAmgkagQtAAB1YmhuKYGUfZQoaAVoBmgHXZRoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAdlbnRyaWVzlF2UdWg4aG1oJk5oKE5oJGoELQAAdWJqrw0AACmBlH2UKGgFaAZoB12UKGq0DQAAKYGUfZQoaAWMXmNhbGN1bGF0ZV9ibG9ja19kaWZmaWN1bHR5KGJsb2NrX251bWJlciwgYmxvY2tfdGltZXN0YW1wLCBwYXJlbnRfdGltZXN0YW1wLCBwYXJlbnRfZGlmZmljdWx0eSmUaAddlChqug0AACmBlH2UKGgFjBpjYWxjdWxhdGVfYmxvY2tfZGlmZmljdWx0eZRoB12UaB+MGmNhbGN1bGF0ZV9ibG9ja19kaWZmaWN1bHR5lIWUgZR9lChoBWgG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dXQgd2FzIGFkZGVkIHNob3J0bHkgYWZ0ZXIgbGF1bmNoLiBIb3dldmVyIHNpbmNlIHRoZQogICAgIyBib21iIGhhcyBubyBlZmZlY3QgcHJpb3IgdG8gYmxvY2sgMjAwMDAwIHdlIHByZXRlbmQgaXQgZXhpc3RlZCBmcm9tCiAgICAjIGdlbmVzaXMuCiAgICAjIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vcHVsbC8xNTg4CiAgICBudW1fYm9tYl9wZXJpb2RzID0gKGludChibG9ja19udW1iZXIpIC8vIDEwMDAwMCkgLSAyCiAgICBpZiBudW1fYm9tYl9wZXJpb2RzID49IDA6CiAgICAgICAgcmV0dXJuIFVpbnQoCiAgICAgICAgICAgIG1heChkaWZmaWN1bHR5ICsgMioqbnVtX2JvbWJfcGVyaW9kcywgR0VORVNJU19ESUZGSUNVTFRZKQogICAgICAgICkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIFVpbnQobWF4KGRpZmZpY3VsdHksIEdFTkVTSVNfRElGRklDVUxUWSkpCpRoB12UaB9YgwMAAGRlZiBjYWxjdWxhdGVfYmxvY2tfZGlmZmljdWx0eSgKICAgIGJsb2NrX251bWJlcjogVWludCwKICAgIGJsb2NrX3RpbWVzdGFtcDogVTI1NiwKICAgIHBhcmVudF90aW1lc3RhbXA6IFUyNTYsCiAgICBwYXJlbnRfZGlmZmljdWx0eTogVWludCwKKSAtPiBVaW50OgogICAgb2Zmc2V0ID0gKAogICAgICAgIGludChwYXJlbnRfZGlmZmljdWx0eSkKICAgICAgICAvLyAyMDQ4CiAgICAgICAgKiBtYXgoMSAtIGludChibG9ja190aW1lc3RhbXAgLSBwYXJlbnRfdGltZXN0YW1wKSAvLyAxMCwgLTk5KQogICAgKQogICAgZGlmZmljdWx0eSA9IGludChwYXJlbnRfZGlmZmljdWx0eSkgKyBvZmZzZXQKICAgICMgSGlzdG9yaWNhbCBOb3RlOiBUaGUgZGlmZmljdWx0eSBib21iIHdhcyBub3QgcHJlc2VudCBpbiBFdGhlcmV1bSBhdCB0aGUKICAgICMgc3RhcnQgb2YgRnJvbnRpZXIsIGJ1dCB3YXMgYWRkZWQgc2hvcnRseSBhZnRlciBsYXVuY2guIEhvd2V2ZXIgc2luY2UgdGhlCiAgICAjIGJvbWIgaGFzIG5vIGVmZmVjdCBwcmlvciB0byBibG9jayAyMDAwMDAgd2UgcHJldGVuZCBpdCBleGlzdGVkIGZyb20KICAgICMgZ2VuZXNpcy4KICAgICMgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9wdWxsLzE1ODgKICAgIG51bV9ib21iX3BlcmlvZHMgPSAoaW50KGJsb2NrX251bWJlcikgLy8gMTAwMDAwKSAtIDIKICAgIGlmIG51bV9ib21iX3BlcmlvZHMgPj0gMDoKICAgICAgICByZXR1cm4gVWludCgKICAgICAgICAgICAgbWF4KGRpZmZpY3VsdHkgKyAyKipudW1fYm9tYl9wZXJpb2RzLCBHRU5FU0lTX0RJRkZJQ1VMVFkpCiAgICAgICAgKQogICAgZWxzZToKICAgICAgICByZXR1cm4gVWludChtYXgoZGlmZmljdWx0eSwgR0VORVNJU19ESUZGSUNVTFRZKSkKlIWUgZR9lChoBWgGaCRqFC8AAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9kYW9fZm9yay9zcGVjLnB5lIwJeG1sOnNwYWNllGqdBQAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UagoOAABLAXOMB2xpbmVub3OUiXVoOGryDQAAaCZoa2goTTECaCRqBC0AAHViZWgpfZQoaCtdlGp+BAAAYWgtXZRoMl2UjBpjYWxjdWxhdGVfYmxvY2tfZGlmZmljdWx0eZRhaDRdlGg2XZR1aDhoCWgmaGtoKE0eAmgkan0NAABoJWgDdWJlaCl9lChoK12UanMBAABhaC1dlGgyXZSMDm1vZHVsZSBkZXRhaWxzlGFoNF2UaDZdlHVoOGgJaCZoa2goS0ZoJGh+aCVoA3ViZWgpfZQoaCtdlIwWZXRoZXJldW0tc3BlY2lmaWNhdGlvbpRhaC1dlGgyXZSMFmV0aGVyZXVtIHNwZWNpZmljYXRpb26UYWg0XZRoNl2UdWg4aAloJmhraChLB2gkaAtoJWgDdWJlaCl9lChoK12UKGh8jBZldGhlcmV1bS1kYW8tZm9yay1zcGVjlGVoLV2UaDJdlIwWZXRoZXJldW0uZGFvX2Zvcmsuc3BlY5RhaDRdlGg2XZR1aDhoCWgmaGtoKEsCaCRoA2glaAN1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAZzb3VyY2WUaCd1aDhoAYwOY3VycmVudF9zb3VyY2WUaCeMDGN1cnJlbnRfbGluZZRLAIwIc2V0dGluZ3OUjBFkb2N1dGlscy5mcm9udGVuZJSMBlZhbHVlc5STlCmBlH2UKIwMcmVwb3J0X2xldmVslEsCjApoYWx0X2xldmVslEsEjBFleGl0X3N0YXR1c19sZXZlbJRLBYwFZGVidWeUTowOd2FybmluZ19zdHJlYW2UTowJdHJhY2ViYWNrlE6MD291dHB1dF9lbmNvZGluZ5SMBXV0Zi04lIwdb3V0cHV0X2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjBF4bWxjaGFycmVmcmVwbGFjZZSMDmVycm9yX2VuY29kaW5nlIwFdXRmLTiUjBxlcnJvcl9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwQYmFja3NsYXNocmVwbGFjZZSME3JlY29yZF9kZXBlbmRlbmNpZXOUjA5kb2N1dGlscy51dGlsc5SMDkRlcGVuZGVuY3lMaXN0lJOUKYGUfZQojARsaXN0lF2UjARmaWxllE51YowGY29uZmlnlE6MDWR1bXBfc2V0dGluZ3OUTowOZHVtcF9pbnRlcm5hbHOUTowPZHVtcF90cmFuc2Zvcm1zlE6MD2R1bXBfcHNldWRvX3htbJROjBBleHBvc2VfaW50ZXJuYWxzlE6MDnN0cmljdF92aXNpdG9ylE6MD19kaXNhYmxlX2NvbmZpZ5ROjAdfc291cmNllE6MDF9kZXN0aW5hdGlvbpSMOGRvYy9kaWZmcy9kYW9fZm9ya190YW5nZXJpbmVfd2hpc3RsZS9zcGVjL2luZGV4LnBpY2tsZTY0lIwNX2NvbmZpZ19maWxlc5RdlIwRbGluZV9sZW5ndGhfbGltaXSUTRAnjAl0YWJfd2lkdGiUSwiMEHN5bnRheF9oaWdobGlnaHSUjARsb25nlIwMc21hcnRfcXVvdGVzlImME3NtYXJ0cXVvdGVzX2xvY2FsZXOUTowdY2hhcmFjdGVyX2xldmVsX2lubGluZV9tYXJrdXCUiYwGd3JpdGVylIwDeG1slIwZY29tcGFyZV9zZWN0aW9uc19ieV9uYW1lc5SJjAxkdW1wX3JzdGRpZmaUTowFX2JvdGiUfZQoaA5OjAlnZW5lcmF0b3KUTowJZGF0ZXN0YW1wlE6MC3NvdXJjZV9saW5rlE6MCnNvdXJjZV91cmyUTowNdG9jX2JhY2tsaW5rc5RqLgUAAIwSZm9vdG5vdGVfYmFja2xpbmtzlEsBjA1zZWN0bnVtX3hmb3JtlEsBjA5kb2N0aXRsZV94Zm9ybZRLAYwNZG9jaW5mb194Zm9ybZRLAYwSc2VjdHN1YnRpdGxlX3hmb3JtlEsAjA5zdHJpcF9jb21tZW50c5ROjA5pbnB1dF9lbmNvZGluZ5ROjBxpbnB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwGc3RyaWN0lIwNbGFuZ3VhZ2VfY29kZZSMAmVulIwOcGVwX3JlZmVyZW5jZXOUTowMcGVwX2Jhc2VfdXJslIwfaHR0cDovL3d3dy5weXRob24ub3JnL2Rldi9wZXBzL5SMFXBlcF9maWxlX3VybF90ZW1wbGF0ZZSMCHBlcC0lMDRklIwOcmZjX3JlZmVyZW5jZXOUTowMcmZjX2Jhc2VfdXJslIwbaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvlIwddHJpbV9mb290bm90ZV9yZWZlcmVuY2Vfc3BhY2WUTowWZmlsZV9pbnNlcnRpb25fZW5hYmxlZJRLAYwLcmF3X2VuYWJsZWSUSwGMDmF1dG9faWRfcHJlZml4lIwCaWSUjAlpZF9wcmVmaXiUaAaMG3N0cmlwX2VsZW1lbnRzX3dpdGhfY2xhc3Nlc5ROjA1zdHJpcF9jbGFzc2VzlE51jARib3RolH2UjApfb3B0aW9uc1RvlIwFX2JvdGiUjAtfb2xkX3NvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzLy50b3gvZG9jcy9zdGFnZTBfb3V0L2F1dG9hcGkvlIwLX25ld19zb3VyY2WUjAlkb2MvZGlmZnOUapcvAABqmC8AAHVijAhyZXBvcnRlcpROjBBpbmRpcmVjdF90YXJnZXRzlF2UjBFzdWJzdGl0dXRpb25fZGVmc5R9lIwSc3Vic3RpdHV0aW9uX25hbWVzlH2UjAhyZWZuYW1lc5R9lIwGcmVmaWRzlH2UjAduYW1laWRzlH2UjAluYW1ldHlwZXOUfZRoK32UjA1mb290bm90ZV9yZWZzlH2UjA1jaXRhdGlvbl9yZWZzlH2UjA1hdXRvZm9vdG5vdGVzlF2UjBFhdXRvZm9vdG5vdGVfcmVmc5RdlIwQc3ltYm9sX2Zvb3Rub3Rlc5RdlIwUc3ltYm9sX2Zvb3Rub3RlX3JlZnOUXZSMCWZvb3Rub3Rlc5RdlIwJY2l0YXRpb25zlF2UjBJhdXRvZm9vdG5vdGVfc3RhcnSUSwGMFXN5bWJvbF9mb290bm90ZV9zdGFydJRLAIwKaWRfY291bnRlcpSMC2NvbGxlY3Rpb25zlIwHQ291bnRlcpSTlH2UhZRSlIwOcGFyc2VfbWVzc2FnZXOUXZSMEnRyYW5zZm9ybV9tZXNzYWdlc5RdlIwLdHJhbnNmb3JtZXKUTowLaW5jbHVkZV9sb2eUXZSMCmRlY29yYXRpb26UTmglaAN1Yi4=