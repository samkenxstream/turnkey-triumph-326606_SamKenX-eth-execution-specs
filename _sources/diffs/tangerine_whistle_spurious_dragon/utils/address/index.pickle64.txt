gASVvFIAAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UaACMB3NlY3Rpb26Uk5QpgZR9lChoBWgGaAddlChoAIwFdGl0bGWUk5QpgZR9lChoBYwvOm1vZDpgZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudXRpbHMuYWRkcmVzc2CUaAddlChoAIwJcmVmZXJlbmNllJOUKYGUfZQoaAVoBmgHXZRoAIwHbGl0ZXJhbJSTlCmBlH2UKGgFaBJoB12UaACMBFRleHSUk5SMKGV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnV0aWxzLmFkZHJlc3OUhZSBlH2UKGgFaAaMBnBhcmVudJRoG4wJX2RvY3VtZW50lGgDjAZzb3VyY2WUjKIvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy8udG94L2RvY3Mvc3RhZ2UwX291dC9hdXRvYXBpLyA9PiBkb2MvZGlmZnOUjARsaW5llEsAdWJhjAphdHRyaWJ1dGVzlH2UKIwDaWRzlF2UjAdjbGFzc2VzlF2UKIwEeHJlZpSMAnB5lIwGcHktbW9klGWMBW5hbWVzlF2UjAhkdXBuYW1lc5RdlIwIYmFja3JlZnOUXZR1jAd0YWduYW1llGgZaCZOaChOaCRoFnViYWgpfZQoaCtdlGgtXZSMD2NoYW5nZS1yZXBsYWNlZJRhaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSML21vZHVsZS1ldGhlcmV1bS50YW5nZXJpbmVfd2hpc3RsZS51dGlscy5hZGRyZXNzlIwIcmVmdGl0bGWUjChldGhlcmV1bS50YW5nZXJpbmVfd2hpc3RsZS51dGlscy5hZGRyZXNzlHVoOGgUaCZoJ2goSwBoJGgQaCVoA3ViaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAWMLTptb2Q6YGV0aGVyZXVtLnNwdXJpb3VzX2RyYWdvbi51dGlscy5hZGRyZXNzYJRoB12UaB+MJmV0aGVyZXVtLnNwdXJpb3VzX2RyYWdvbi51dGlscy5hZGRyZXNzlIWUgZR9lChoBWgGaCRoSGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQojAR4cmVmlIwCcHmUjAZweS1tb2SUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRoRXViYWgpfZQoaCtdlGgtXZSMEmNoYW5nZS1yZXBsYWNlbWVudJRhaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMLW1vZHVsZS1ldGhlcmV1bS5zcHVyaW91c19kcmFnb24udXRpbHMuYWRkcmVzc5SMCHJlZnRpdGxllIwmZXRoZXJldW0uc3B1cmlvdXNfZHJhZ29uLnV0aWxzLmFkZHJlc3OUdWg4aBRoJmgnaChLAGgkaBBoJWgDdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGgOaCaMti9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL3RhbmdlcmluZV93aGlzdGxlL3V0aWxzL2FkZHJlc3MvaW5kZXgucnN0lGgoSwJoJGgLaCVoA3VijA9zcGhpbnguYWRkbm9kZXOUjAVpbmRleJSTlCmBlH2UKGgFaAZoB12UaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwHZW50cmllc5RdlCiMBHBhaXKUjDBtb2R1bGU7IGV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnV0aWxzLmFkZHJlc3OUjC9tb2R1bGUtZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudXRpbHMuYWRkcmVzc5RoBk50lGF1aDhobWgmaGtoKEsFaCRoC2glaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwxVGFuZ2VyaW5lIFdoaXN0bGUgVXRpbGl0eSBGdW5jdGlvbnMgRm9yIEFkZHJlc3Nlc5RoB12UKGgAjAZpbmxpbmWUk5QpgZR9lChoBWgGaAddlGgfjBFUYW5nZXJpbmUgV2hpc3RsZZSFlIGUfZQoaAVoBmgkaIdoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UjA9jaGFuZ2UtcmVwbGFjZWSUYWgyXZRoNF2UaDZdlHVoOGiFaCRogWglaANoJmgnaChLAHViaIYpgZR9lChoBWgGaAddlGgfjA9TcHVyaW91cyBEcmFnb26UhZSBlH2UKGgFaAZoJGiVaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlIwSY2hhbmdlLXJlcGxhY2VtZW50lGFoMl2UaDRdlGg2XZR1aDhohWgkaIFoJWgDaCZoJ2goSwB1YmgfjCAgVXRpbGl0eSBGdW5jdGlvbnMgRm9yIEFkZHJlc3Nlc5SFlIGUfZQoaAVoBmgkaIFoJWgDaCZoJ2goSwB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aA5oJmhraChLB2gkaH5oJWgDdWJoAIwFdG9waWOUk5QpgZR9lChoBWgGaAddlChoDymBlH2UKGgFjBFUYWJsZSBvZiBDb250ZW50c5RoB12UaB+MEVRhYmxlIG9mIENvbnRlbnRzlIWUgZR9lChoBWgGaCRosmglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKEsLaCRor3ViaACMC2J1bGxldF9saXN0lJOUKYGUfZQoaAVoBmgHXZQoaACMCWxpc3RfaXRlbZSTlCmBlH2UKGgFaAZoB12UaACMCXBhcmFncmFwaJSTlCmBlH2UKGgFaAZoB12UaBUpgZR9lChoBWgGaAddlGgfjAxJbnRyb2R1Y3Rpb26UhZSBlH2UKGgFaAZoJGjPaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UjANpZDGUYWgtXZRoMl2UaDRdlGg2XZSMBXJlZmlklIwMaW50cm9kdWN0aW9ulHVoOGgUaCZOaChOaCRozHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoymgmTmgoTmgkaMd1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aMVoJk5oKE5oJGjCdWJoximBlH2UKGgFaAZoB12UKGjLKYGUfZQoaAVoBmgHXZRoFSmBlH2UKGgFaAZoB12UaB+MD01vZHVsZSBDb250ZW50c5SFlIGUfZQoaAVoBmgkaPFoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZSMA2lkMpRhaC1dlGgyXZRoNF2UaDZdlIwFcmVmaWSUjA9tb2R1bGUtY29udGVudHOUdWg4aBRoJk5oKE5oJGjudWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjKaCZOaChOaCRo63ViaMEpgZR9lChoBWgGaAddlGjGKYGUfZQoaAVoBmgHXZRoyymBlH2UKGgFaAZoB12UaBUpgZR9lChoBWgGaAddlGgfjAlGdW5jdGlvbnOUhZSBlH2UKGgFaAZoJGoQAQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UjANpZDOUYWgtXZRoMl2UaDRdlGg2XZSMBXJlZmlklIwJZnVuY3Rpb25zlHVoOGgUaCZOaChOaCRqDQEAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoymgmTmgoTmgkagoBAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aMVoJk5oKE5oJGoHAQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjAaCZOaChOaCRo63ViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoxWgmTmgoTmgkaMJ1YmjGKYGUfZQoaAVoBmgHXZQoaMspgZR9lChoBWgGaAddlGgVKYGUfZQoaAVoBmgHXZRoH4wOTW9kdWxlIERldGFpbHOUhZSBlH2UKGgFaAZoJGo+AQAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UjANpZDSUYWgtXZRoMl2UaDRdlGg2XZSMBXJlZmlklIwObW9kdWxlLWRldGFpbHOUdWg4aBRoJk5oKE5oJGo7AQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjKaCZOaChOaCRqOAEAAHViaMEpgZR9lChoBWgGaAddlChoximBlH2UKGgFaAZoB12UaMspgZR9lChoBWgGaAddlGgVKYGUfZQoaAVoBmgHXZRoH4wKdG9fYWRkcmVzc5SFlIGUfZQoaAVoBmgkal0BAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZSMA2lkNZRhaC1dlGgyXZRoNF2UaDZdlIwFcmVmaWSUjAp0by1hZGRyZXNzlHVoOGgUaCZOaChOaCRqWgEAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoymgmTmgoTmgkalcBAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aMVoJk5oKE5oJGpUAQAAdWJoximBlH2UKGgFaAZoB12UaMspgZR9lChoBWgGaAddlGgVKYGUfZQoaAVoBmgHXZRoH4wYY29tcHV0ZV9jb250cmFjdF9hZGRyZXNzlIWUgZR9lChoBWgGaCRqfwEAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlIwDaWQ2lGFoLV2UaDJdlGg0XZRoNl2UjAVyZWZpZJSMGGNvbXB1dGUtY29udHJhY3QtYWRkcmVzc5R1aDhoFGgmTmgoTmgkanwBAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aMpoJk5oKE5oJGp5AQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjFaCZOaChOaCRqVAEAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhowGgmTmgoTmgkajgBAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aMVoJk5oKE5oJGjCdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjAaCZOaChOaCRor3ViZWgpfZQoaCtdlIwRdGFibGUtb2YtY29udGVudHOUYWgtXZQojAhjb250ZW50c5SMBWxvY2FslGVoMl2UjBF0YWJsZSBvZiBjb250ZW50c5RhaDRdlGg2XZR1aDhorWgmaGtoKEsLaCRofmglaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwMSW50cm9kdWN0aW9ulGgHXZRoH4wMSW50cm9kdWN0aW9ulIWUgZR9lChoBWgGaCRqugEAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKEsOaCRqtwEAAGglaAN1YmjLKYGUfZQoaAWMU0FkZHJlc3Mgc3BlY2lmaWMgZnVuY3Rpb25zIHVzZWQgaW4gdGhpcyB0YW5nZXJpbmUgd2hpc3RsZSB2ZXJzaW9uIG9mCnNwZWNpZmljYXRpb24ulGgHXZQoaB+MKEFkZHJlc3Mgc3BlY2lmaWMgZnVuY3Rpb25zIHVzZWQgaW4gdGhpcyCUhZSBlH2UKGgFaAZoJGrIAQAAaCVoA2gmaCdoKEsAdWJohimBlH2UKGgFaAZoB12UaB+MEXRhbmdlcmluZSB3aGlzdGxllIWUgZR9lChoBWgGaCRq0AEAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZSMD2NoYW5nZS1yZXBsYWNlZJRhaDJdlGg0XZRoNl2UdWg4aIVoJGrIAQAAaCVoA2gmaCdoKEsAdWJohimBlH2UKGgFaAZoB12UaB+MD3NwdXJpb3VzIGRyYWdvbpSFlIGUfZQoaAVoBmgkat4BAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UjBJjaGFuZ2UtcmVwbGFjZW1lbnSUYWgyXZRoNF2UaDZdlHVoOGiFaCRqyAEAAGglaANoJmgnaChLAHViaB+MGiB2ZXJzaW9uIG9mCnNwZWNpZmljYXRpb24ulIWUgZR9lChoBWgGaCRqyAEAAGglaANoJmgnaChLAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoymgmaGtoKEsQaCRqtwEAAGglaAN1YmVoKX2UKGgrXZRo3mFoLV2UaDJdlIwMaW50cm9kdWN0aW9ulGFoNF2UaDZdlHVoOGgJaCZoa2goSw5oJGh+aCVoA3ViaAopgZR9lChoBWgGaAddlChoDymBlH2UKGgFjA9Nb2R1bGUgQ29udGVudHOUaAddlGgfjA9Nb2R1bGUgQ29udGVudHOUhZSBlH2UKGgFaAZoJGoAAgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGgOaCZoa2goSxVoJGr9AQAAdWJoCimBlH2UKGgFaAZoB12UKGgPKYGUfZQoaAWMCUZ1bmN0aW9uc5RoB12UaB+MCUZ1bmN0aW9uc5SFlIGUfZQoaAVoBmgkahECAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aA5oJmhraChLGWgkag4CAAB1YmhsjBB0YWJ1bGFyX2NvbF9zcGVjlJOUKYGUfZQoaAVoBmgHXZRoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjARzcGVjlIwQXFh7MX17Mn1cWHsxfXsyfZR1aDhqHwIAAGgmjMcvaG9tZS9ydW5uZXIvd29yay90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy90dXJua2V5LXRyaXVtcGgtMzI2NjA2X1NhbUtlblgtZXRoLWV4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS90YW5nZXJpbmVfd2hpc3RsZS91dGlscy9hZGRyZXNzL2luZGV4LnJzdDozNDo8YXV0b3N1bW1hcnk+lGgoTmgkag4CAAB1YowWc3BoaW54LmV4dC5hdXRvc3VtbWFyeZSMEWF1dG9zdW1tYXJ5X3RhYmxllJOUKYGUfZQoaAWMpAoKCgp0b19hZGRyZXNzCgpDb252ZXJ0IGEgVWludCBvciBVMjU2IHZhbHVlIHRvIGEgdmFsaWQgYWRkcmVzcyAoMjAgYnl0ZXMpLgoKY29tcHV0ZV9jb250cmFjdF9hZGRyZXNzCgpDb21wdXRlcyBhZGRyZXNzIG9mIHRoZSBuZXcgYWNjb3VudCB0aGF0IG5lZWRzIHRvIGJlIGNyZWF0ZWQulGgHXZRoAIwFdGFibGWUk5QpgZR9lChoBWgGaAddlGgAjAZ0Z3JvdXCUk5QpgZR9lChoBWgGaAddlChoAIwHY29sc3BlY5STlCmBlH2UKGgFaAZoB12UaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIY29sd2lkdGiUSwp1aDhqPgIAAGgmTmgoTmgkajsCAAB1Ymo/AgAAKYGUfZQoaAVoBmgHXZRoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhjb2x3aWR0aJRLWnVoOGo+AgAAaCZOaChOaCRqOwIAAHViaACMBXRib2R5lJOUKYGUfZQoaAVoBmgHXZQoaACMA3Jvd5STlCmBlH2UKGgFaAZoB12UKGgAjAVlbnRyeZSTlCmBlH2UKGgFaAZoB12UaMspgZR9lChoBYxHOm9iajpgdG9fYWRkcmVzcyA8ZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudXRpbHMuYWRkcmVzcy50b19hZGRyZXNzPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFamUCAABoB12UaB+MCnRvX2FkZHJlc3OUhZSBlH2UKGgFaAZoJGpqAgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRqZwIAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwzZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudXRpbHMuYWRkcmVzcy50b19hZGRyZXNzlIwIcmVmdGl0bGWUjDNldGhlcmV1bS50YW5nZXJpbmVfd2hpc3RsZS51dGlscy5hZGRyZXNzLnRvX2FkZHJlc3OUdWg4aBRoJk5oKE5oJGpjAgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjKaCaMxy9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL3RhbmdlcmluZV93aGlzdGxlL3V0aWxzL2FkZHJlc3MvaW5kZXgucnN0OjM0OjxhdXRvc3VtbWFyeT6UaChLAWgkamACAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4al4CAABoJk5oKE5oJGpbAgAAdWJqXwIAACmBlH2UKGgFaAZoB12UaMspgZR9lChoBYw7Q29udmVydCBhIFVpbnQgb3IgVTI1NiB2YWx1ZSB0byBhIHZhbGlkIGFkZHJlc3MgKDIwIGJ5dGVzKS6UaAddlGgfjDtDb252ZXJ0IGEgVWludCBvciBVMjU2IHZhbHVlIHRvIGEgdmFsaWQgYWRkcmVzcyAoMjAgYnl0ZXMpLpSFlIGUfZQoaAVoBmgkapQCAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aMpoJozHL2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vdGFuZ2VyaW5lX3doaXN0bGUvdXRpbHMvYWRkcmVzcy9pbmRleC5yc3Q6MzQ6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqkQIAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqXgIAAGgmTmgoTmgkalsCAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4alkCAABoJk5oKE5oJGpWAgAAdWJqWgIAACmBlH2UKGgFaAZoB12UKGpfAgAAKYGUfZQoaAVoBmgHXZRoyymBlH2UKGgFjGM6b2JqOmBjb21wdXRlX2NvbnRyYWN0X2FkZHJlc3MgPGV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnV0aWxzLmFkZHJlc3MuY29tcHV0ZV9jb250cmFjdF9hZGRyZXNzPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFarcCAABoB12UaB+MGGNvbXB1dGVfY29udHJhY3RfYWRkcmVzc5SFlIGUfZQoaAVoBmgkarwCAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGq5AgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjEFldGhlcmV1bS50YW5nZXJpbmVfd2hpc3RsZS51dGlscy5hZGRyZXNzLmNvbXB1dGVfY29udHJhY3RfYWRkcmVzc5SMCHJlZnRpdGxllIxBZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudXRpbHMuYWRkcmVzcy5jb21wdXRlX2NvbnRyYWN0X2FkZHJlc3OUdWg4aBRoJk5oKE5oJGq1AgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGjKaCaMxy9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL2Rv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cywgbm9uY2VdKSkKICAgIGNhbm9uaWNhbF9hZGRyZXNzID0gY29tcHV0ZWRfYWRkcmVzc1stMjA6XQogICAgcGFkZGVkX2FkZHJlc3MgPSBsZWZ0X3BhZF96ZXJvX2J5dGVzKGNhbm9uaWNhbF9hZGRyZXNzLCAyMCkKICAgIHJldHVybiBBZGRyZXNzKHBhZGRlZF9hZGRyZXNzKQqUhZSBlH2UKGgFaAZoJGpoBgAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwGc291cmNllIynL2hvbWUvcnVubmVyL3dvcmsvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3MvdHVybmtleS10cml1bXBoLTMyNjYwNl9TYW1LZW5YLWV0aC1leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL3RhbmdlcmluZV93aGlzdGxlL3V0aWxzL2FkZHJlc3MucHmUjAl4bWw6c3BhY2WUahsDAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRqtQQAAEsBc4wHbGluZW5vc5SJdWg4ap0EAABoJmhraChLTmgkar4EAABoJWgDdWJlaCl9lChoK12Uao4BAABhaC1dlGgyXZSMGGNvbXB1dGVfY29udHJhY3RfYWRkcmVzc5RhaDRdlGg2XZR1aDhoCWgmaGtoKEs8aCRqKgMAAGglaAN1YmVoKX2UKGgrXZRqTQEAAGFoLV2UaDJdlIwObW9kdWxlIGRldGFpbHOUYWg0XZRoNl2UdWg4aAloJmhraChLJGgkaH5oJWgDdWJlaCl9lChoK12UjDF0YW5nZXJpbmUtd2hpc3RsZS11dGlsaXR5LWZ1bmN0aW9ucy1mb3ItYWRkcmVzc2VzlGFoLV2UaDJdlIwxdGFuZ2VyaW5lIHdoaXN0bGUgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGFkZHJlc3Nlc5RhaDRdlGg2XZR1aDhoCWgmaGtoKEsHaCRoC2glaAN1YmVoKX2UKGgrXZQoaHyMKGV0aGVyZXVtLXRhbmdlcmluZS13aGlzdGxlLXV0aWxzLWFkZHJlc3OUZWgtXZRoMl2UjChldGhlcmV1bS50YW5nZXJpbmVfd2hpc3RsZS51dGlscy5hZGRyZXNzlGFoNF2UaDZdlHVoOGgJaCZoa2goSwJoJGgDaCVoA3ViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZRoJ3VoOGgBjA5jdXJyZW50X3NvdXJjZZRoJ4wMY3VycmVudF9saW5llEsAjAhzZXR0aW5nc5SMEWRvY3V0aWxzLmZyb250ZW5klIwGVmFsdWVzlJOUKYGUfZQojAxyZXBvcnRfbGV2ZWyUSwKMCmhhbHRfbGV2ZWyUSwSMEWV4aXRfc3RhdHVzX2xldmVslEsFjAVkZWJ1Z5ROjA53YXJuaW5nX3N0cmVhbZROjAl0cmFjZWJhY2uUTowPb3V0cHV0X2VuY29kaW5nlIwFdXRmLTiUjB1vdXRwdXRfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMEXhtbGNoYXJyZWZyZXBsYWNllIwOZXJyb3JfZW5jb2RpbmeUjAV1dGYtOJSMHGVycm9yX2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjBBiYWNrc2xhc2hyZXBsYWNllIwTcmVjb3JkX2RlcGVuZGVuY2llc5SMDmRvY3V0aWxzLnV0aWxzlIwORGVwZW5kZW5jeUxpc3SUk5QpgZR9lCiMBGxpc3SUXZSMBGZpbGWUTnVijAZjb25maWeUTowNZHVtcF9zZXR0aW5nc5ROjA5kdW1wX2ludGVybmFsc5ROjA9kdW1wX3RyYW5zZm9ybXOUTowPZHVtcF9wc2V1ZG9feG1slE6MEGV4cG9zZV9pbnRlcm5hbHOUTowOc3RyaWN0X3Zpc2l0b3KUTowPX2Rpc2FibGVfY29uZmlnlE6MB19zb3VyY2WUTowMX2Rlc3RpbmF0aW9ulIxIZG9jL2RpZmZzL3RhbmdlcmluZV93aGlzdGxlX3NwdXJpb3VzX2RyYWdvbi91dGlscy9hZGRyZXNzL2luZGV4LnBpY2tsZTY0lIwNX2NvbmZpZ19maWxlc5RdlIwRbGluZV9sZW5ndGhfbGltaXSUTRAnjAl0YWJfd2lkdGiUSwiMEHN5bnRheF9oaWdobGlnaHSUjARsb25nlIwMc21hcnRfcXVvdGVzlImME3NtYXJ0cXVvdGVzX2xvY2FsZXOUTowdY2hhcmFjdGVyX2xldmVsX2lubGluZV9tYXJrdXCUiYwGd3JpdGVylIwDeG1slIwZY29tcGFyZV9zZWN0aW9uc19ieV9uYW1lc5SJjAxkdW1wX3JzdGRpZmaUTowFX2JvdGiUfZQoaA5OjAlnZW5lcmF0b3KUTowJZGF0ZXN0YW1wlE6MC3NvdXJjZV9saW5rlE6MCnNvdXJjZV91cmyUTowNdG9jX2JhY2tsaW5rc5RqXgIAAIwSZm9vdG5vdGVfYmFja2xpbmtzlEsBjA1zZWN0bnVtX3hmb3JtlEsBjA5kb2N0aXRsZV94Zm9ybZRLAYwNZG9jaW5mb194Zm9ybZRLAYwSc2VjdHN1YnRpdGxlX3hmb3JtlEsAjA5zdHJpcF9jb21tZW50c5ROjA5pbnB1dF9lbmNvZGluZ5ROjBxpbnB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwGc3RyaWN0lIwNbGFuZ3VhZ2VfY29kZZSMAmVulIwOcGVwX3JlZmVyZW5jZXOUTowMcGVwX2Jhc2VfdXJslIwfaHR0cDovL3d3dy5weXRob24ub3JnL2Rldi9wZXBzL5SMFXBlcF9maWxlX3VybF90ZW1wbGF0ZZSMCHBlcC0lMDRklIwOcmZjX3JlZmVyZW5jZXOUTowMcmZjX2Jhc2VfdXJslIwbaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvlIwddHJpbV9mb290bm90ZV9yZWZlcmVuY2Vfc3BhY2WUTowWZmlsZV9pbnNlcnRpb25fZW5hYmxlZJRLAYwLcmF3X2VuYWJsZWSUSwGMDmF1dG9faWRfcHJlZml4lIwCaWSUjAlpZF9wcmVmaXiUaAaMG3N0cmlwX2VsZW1lbnRzX3dpdGhfY2xhc3Nlc5ROjA1zdHJpcF9jbGFzc2VzlE51jARib3RolH2UjApfb3B0aW9uc1RvlIwFX2JvdGiUjAtfb2xkX3NvdXJjZZSMlS9ob21lL3J1bm5lci93b3JrL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzL3R1cm5rZXktdHJpdW1waC0zMjY2MDZfU2FtS2VuWC1ldGgtZXhlY3V0aW9uLXNwZWNzLy50b3gvZG9jcy9zdGFnZTBfb3V0L2F1dG9hcGkvlIwLX25ld19zb3VyY2WUjAlkb2MvZGlmZnOUausGAABq7AYAAHVijAhyZXBvcnRlcpROjBBpbmRpcmVjdF90YXJnZXRzlF2UjBFzdWJzdGl0dXRpb25fZGVmc5R9lIwSc3Vic3RpdHV0aW9uX25hbWVzlH2UjAhyZWZuYW1lc5R9lIwGcmVmaWRzlH2UjAduYW1laWRzlH2UjAluYW1ldHlwZXOUfZRoK32UjA1mb290bm90ZV9yZWZzlH2UjA1jaXRhdGlvbl9yZWZzlH2UjA1hdXRvZm9vdG5vdGVzlF2UjBFhdXRvZm9vdG5vdGVfcmVmc5RdlIwQc3ltYm9sX2Zvb3Rub3Rlc5RdlIwUc3ltYm9sX2Zvb3Rub3RlX3JlZnOUXZSMCWZvb3Rub3Rlc5RdlIwJY2l0YXRpb25zlF2UjBJhdXRvZm9vdG5vdGVfc3RhcnSUSwGMFXN5bWJvbF9mb290bm90ZV9zdGFydJRLAIwKaWRfY291bnRlcpSMC2NvbGxlY3Rpb25zlIwHQ291bnRlcpSTlH2UhZRSlIwOcGFyc2VfbWVzc2FnZXOUXZSMEnRyYW5zZm9ybV9tZXNzYWdlc5RdlIwLdHJhbnNmb3JtZXKUTowLaW5jbHVkZV9sb2eUXZSMCmRlY29yYXRpb26UTmglaAN1Yi4=